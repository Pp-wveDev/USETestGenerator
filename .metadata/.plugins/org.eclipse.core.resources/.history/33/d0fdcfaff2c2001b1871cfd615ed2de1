/*
 * generated by Xtext 2.25.0
 */
package org.xtext.uma.usex.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.uma.usex.usex.Model
import org.xtext.uma.usex.usex.UseClass
import org.xtext.uma.usex.usex.Operation
import org.xtext.uma.usex.usex.Method
import org.xtext.uma.usex.usex.Query
import org.xtext.uma.usex.usex.Attribute
import org.xtext.uma.usex.usex.AttributeType
import org.xtext.uma.usex.usex.ClassType
import org.xtext.uma.usex.usex.PrimitiveType
import org.xtext.uma.usex.usex.StringInitialization
import org.xtext.uma.usex.usex.IntegerInitialization
import org.xtext.uma.usex.usex.BooleanInitialization
import org.xtext.uma.usex.usex.DoubleInitialization
import org.xtext.uma.usex.usex.AttributeInitialization
import org.eclipse.emf.common.util.EList
import org.xtext.uma.usex.usex.Parameter
import org.xtext.uma.usex.usex.Condition
import org.xtext.uma.usex.usex.Precondition
import org.xtext.uma.usex.usex.Postcondition
import org.xtext.uma.usex.usex.Constraint
import org.xtext.uma.usex.usex.ConditionBody
import org.xtext.uma.usex.usex.Association
import org.xtext.uma.usex.usex.Composition
import org.xtext.uma.usex.usex.RelationBody
import org.xtext.uma.usex.usex.RelationMember
import org.xtext.uma.usex.usex.CardinalityType
import org.xtext.uma.usex.usex.SimpleCardinality
import org.xtext.uma.usex.usex.DoubleCardinality
import org.xtext.uma.usex.usex.CardinalityValue
import org.xtext.uma.usex.usex.IntCardinality
import org.xtext.uma.usex.usex.AsteriskCardinality
import org.xtext.uma.usex.usex.Relation
import org.xtext.uma.usex.generator.UseGenerator
/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
 
class UsexGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val model = resource.allContents.toIterable.filter(Model).get(0);
		// Additions to the model
		
		
		// Generate processed model
		fsa.generateFile(model.name+".use", compile(model)); 
	}
}
