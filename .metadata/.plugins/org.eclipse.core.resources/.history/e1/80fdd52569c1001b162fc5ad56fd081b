grammar org.xtext.uma.usex.Usex with org.eclipse.xtext.common.Terminals

generate usex "http://www.xtext.org/uma/usex/Usex"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model:
	'model' name=ID elements+=(AbstractElement)*
;

AbstractElement:
	Relation | UseClass
;

// --------------------------------- CLASSES ---------------------------------

UseClass:
	'class' name=ID
	('attributes' attributes+=(Attribute)*)?
	('operations' operations+=(Operation)*)?
	('constraints' constraints+=(Constraint)*)?
	'end'
;

// --------------------------------- ATTRIBUTES ---------------------------------
Attribute:
	name=ID ':' type=AttributeType
	('init' ':' initialization=AttributeInitialization)?
	('derived' ':' derivedFrom=ID)? 
;

AttributeType:
	(PrimitiveType | ClassType)
;

PrimitiveType:
	type=('String' | 'Real' | 'Integer' | 'Boolean')
;

ClassType:
	type=[UseClass]
;

AttributeInitialization:
	(DoubleInitialization |  BooleanInitialization | IntegerInitialization | StringInitialization)
;

DoubleInitialization:
	value=DOUBLE
;

BooleanInitialization:
	value=BOOLEAN
;

IntegerInitialization:
	value=INT
;

StringInitialization:
	value=STRING
;

// --------------------------------- OPERATION & QUERIES ---------------------------------
Operation:
	Method | Query
;

Method:
	name=ID '(' inputParameters+=(Parameter)* ')' (':' returnParameter=AttributeType)?
	('begin' operationBody=ID 'end')?
	conditions+=(Condition)*
;

Query:
	name=ID '(' inputParameters+=(Parameter)* ')' ':' returnParameter=AttributeType
	'=' operationBody=ID
;

Parameter:
	name=ID ':' type=AttributeType (',')?
;

Condition:
	Precondition | Postcondition
;

Precondition:
	'pre' conditionBody=ConditionBody
;

Postcondition:
	'post' conditionBody=ConditionBody
;

ConditionBody:
	(name=ID)? ':' condition=ID
;

// --------------------------------- CONSTRAINTS ---------------------------------
Constraint:
	'inv' conditionBody=ConditionBody
;


// --------------------------------- RELATIONS ---------------------------------
Relation:
	Association | Composition
;

Association:
	'association' name=ID 'between' relationBody=RelationBody 'end'
;

Composition:
	'composition' name=ID  'between' relationBody=RelationBody 'end'
;

RelationBody:
	originClass=RelationMember 
	destinyClass=RelationMember
;

RelationMember:
	class=[UseClass] '[' cardinality=CardinalityType ']' 'role' roleName=ID
;

CardinalityType:
	SimpleCardinality | DoubleCardinality
;

SimpleCardinality:
	cardinality=CardinalityValue
;

DoubleCardinality:
	originCardinality=CardinalityValue '..' destinyCardinality=CardinalityValue
;

CardinalityValue:
	IntCardinality | AsteriskCardinality
;

IntCardinality:
	value=INT
;

AsteriskCardinality:
	value=ASTERISK
;

// --------------------------------- TERMINAL RULES ---------------------------------
@Override
terminal INT returns ecore::EInt: ('-')? ('0'..'9')+;

terminal DOUBLE:
	('-')? INT '.' INT
;

terminal BOOLEAN:
	('true' | 'false')
;

terminal COMMENT:
	'--' -> EOF
;

terminal ASTERISK:
	'*'
;