/**
 * generated by Xtext 2.25.0
 */
package org.xtext.uma.usex.generator;

import com.google.common.collect.Iterables;
import com.google.inject.Injector;
import java.io.File;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.resource.XtextResourceSet;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Functions.Function0;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.xtext.uma.usex.UsexStandaloneSetup;
import org.xtext.uma.usex.generator.general.ConditionQueriesGenerator;
import org.xtext.uma.usex.generator.general.InvariantQueriesGenerator;
import org.xtext.uma.usex.generator.general.TestClassGenerator;
import org.xtext.uma.usex.generator.model.ConfigurationParameters;
import org.xtext.uma.usex.generator.model.QueriesFromConstraints;
import org.xtext.uma.usex.generator.model.QueriesFromPre;
import org.xtext.uma.usex.generator.model.UserVariable;
import org.xtext.uma.usex.generator.outputGenerator.OutputGenerator;
import org.xtext.uma.usex.usex.Model;
import org.xtext.uma.usex.usex.UseClass;
import org.xtext.uma.usex.usex.UsexFactory;
import org.xtext.uma.usex.util.UseClassUtil;
import org.xtext.uma.usex.util.UseToUsex;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class UsexGenerator extends AbstractGenerator {
  private UseClassUtil useClassUtil;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
  }
  
  public static Model generateModel(final Resource r, final String testClass, final int intMin, final int intMax) {
    final Model model = ((Model[])Conversions.unwrapArray((Iterables.<Model>filter(IteratorExtensions.<EObject>toIterable(r.getAllContents()), Model.class)), Model.class))[0];
    UsexFactory usexFactory = UsexFactory.eINSTANCE;
    UseClassUtil useClassUtil = new UseClassUtil(r);
    List<UserVariable> userVariables = new ArrayList<UserVariable>();
    UseClass targetUseClass = useClassUtil.getClassFromName(testClass);
    UserVariable targetVar = new UserVariable(targetUseClass, "target");
    userVariables.add(targetVar);
    Map<UseClass, List<QueriesFromPre>> generatedQueriesFromMethods = ConditionQueriesGenerator.generateNewQueriesFromPre(useClassUtil);
    List<QueriesFromConstraints> generatedQueriesFromConstraints = InvariantQueriesGenerator.getQueriesFromInv(useClassUtil);
    InvariantQueriesGenerator.addInvQueriesToModelAsPostcond(model, generatedQueriesFromConstraints);
    TestClassGenerator TestClassGenerator = new org.xtext.uma.usex.generator.general.TestClassGenerator(useClassUtil, usexFactory, generatedQueriesFromMethods, generatedQueriesFromConstraints, userVariables, intMin, intMax);
    UseClass _test = TestClassGenerator.generateTestClass();
    model.getElements().add(_test);
    return model;
  }
  
  public static Resource getResource(final String fName) {
    String _property = System.getProperty("user.dir");
    StringBuilder path = new StringBuilder(_property);
    path.append(("/" + fName));
    String _string = path.toString();
    File f = new File(_string);
    URI uri = URI.createFileURI(f.getAbsolutePath());
    Injector injector = new UsexStandaloneSetup().createInjectorAndDoEMFRegistration();
    XtextResourceSet resourceSet = injector.<XtextResourceSet>getInstance(XtextResourceSet.class);
    resourceSet.addLoadOption(XtextResource.OPTION_RESOLVE_ALL, Boolean.TRUE);
    Resource resource = resourceSet.getResource(uri, true);
    return resource;
  }
  
  public static void generateModelFile(final IFileSystemAccess2 fsa, final String fileName, final Model model) {
    fsa.generateFile(fileName, OutputGenerator.compile(model));
  }
  
  public static String deleteTmpFile(final String fName) {
    String _xblockexpression = null;
    {
      int _length = fName.length();
      int _minus = (_length - 3);
      String _substring = fName.substring(0, _minus);
      String middleFile = (_substring + "usex");
      _xblockexpression = UseToUsex.deleteTmp(middleFile);
    }
    return _xblockexpression;
  }
  
  public static String generateFromFile(final ConfigurationParameters confParam) {
    try {
      String _xblockexpression = null;
      {
        String middleFile = UseToUsex.useToUsex(confParam.getModelFile());
        Resource r = UsexGenerator.getResource(middleFile);
        Model model = UsexGenerator.generateModel(r, confParam.getTestClass(), 
          confParam.getIntMin(), 
          confParam.getIntMax());
        UseToUsex.deleteTmp(middleFile);
        String[] decomposedFName = confParam.getModelFile().split(".use");
        String _get = decomposedFName[0];
        String defName = (_get + "_generated.use");
        try (PrintWriter out = new Function0<PrintWriter>() {
          @Override
          public PrintWriter apply() {
            try {
              return new PrintWriter(defName);
            } catch (Throwable _e) {
              throw Exceptions.sneakyThrow(_e);
            }
          }
        }.apply()) {
          out.println(OutputGenerator.compile(model));
        } catch (final Throwable _t) {
          if (_t instanceof Exception) {
            final Exception e = (Exception)_t;
            e.printStackTrace();
          } else {
            throw Exceptions.sneakyThrow(_t);
          }
        }
        _xblockexpression = InputOutput.<String>println("File generated");
      }
      return _xblockexpression;
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
