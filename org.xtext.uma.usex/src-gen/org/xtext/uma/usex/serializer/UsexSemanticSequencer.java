/*
 * generated by Xtext 2.25.0
 */
package org.xtext.uma.usex.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.uma.usex.services.UsexGrammarAccess;
import org.xtext.uma.usex.usex.Association;
import org.xtext.uma.usex.usex.AsteriskCardinality;
import org.xtext.uma.usex.usex.Attribute;
import org.xtext.uma.usex.usex.BooleanInitialization;
import org.xtext.uma.usex.usex.ClassType;
import org.xtext.uma.usex.usex.Composition;
import org.xtext.uma.usex.usex.ConditionBody;
import org.xtext.uma.usex.usex.Constraint;
import org.xtext.uma.usex.usex.DoubleCardinality;
import org.xtext.uma.usex.usex.DoubleInitialization;
import org.xtext.uma.usex.usex.IntCardinality;
import org.xtext.uma.usex.usex.IntegerInitialization;
import org.xtext.uma.usex.usex.Method;
import org.xtext.uma.usex.usex.Model;
import org.xtext.uma.usex.usex.Postcondition;
import org.xtext.uma.usex.usex.Precondition;
import org.xtext.uma.usex.usex.PrimitiveType;
import org.xtext.uma.usex.usex.Query;
import org.xtext.uma.usex.usex.RelationBody;
import org.xtext.uma.usex.usex.RelationMember;
import org.xtext.uma.usex.usex.SimpleCardinality;
import org.xtext.uma.usex.usex.StringInitialization;
import org.xtext.uma.usex.usex.UseClass;
import org.xtext.uma.usex.usex.UsexPackage;

@SuppressWarnings("all")
public class UsexSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private UsexGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == UsexPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case UsexPackage.ASSOCIATION:
				sequence_Association(context, (Association) semanticObject); 
				return; 
			case UsexPackage.ASTERISK_CARDINALITY:
				sequence_AsteriskCardinality(context, (AsteriskCardinality) semanticObject); 
				return; 
			case UsexPackage.ATTRIBUTE:
				sequence_Attribute(context, (Attribute) semanticObject); 
				return; 
			case UsexPackage.BOOLEAN_INITIALIZATION:
				sequence_BooleanInitialization(context, (BooleanInitialization) semanticObject); 
				return; 
			case UsexPackage.CLASS_TYPE:
				sequence_ClassType(context, (ClassType) semanticObject); 
				return; 
			case UsexPackage.COMPOSITION:
				sequence_Composition(context, (Composition) semanticObject); 
				return; 
			case UsexPackage.CONDITION_BODY:
				sequence_ConditionBody(context, (ConditionBody) semanticObject); 
				return; 
			case UsexPackage.CONSTRAINT:
				sequence_Constraint(context, (Constraint) semanticObject); 
				return; 
			case UsexPackage.DOUBLE_CARDINALITY:
				sequence_DoubleCardinality(context, (DoubleCardinality) semanticObject); 
				return; 
			case UsexPackage.DOUBLE_INITIALIZATION:
				sequence_DoubleInitialization(context, (DoubleInitialization) semanticObject); 
				return; 
			case UsexPackage.INT_CARDINALITY:
				sequence_IntCardinality(context, (IntCardinality) semanticObject); 
				return; 
			case UsexPackage.INTEGER_INITIALIZATION:
				sequence_IntegerInitialization(context, (IntegerInitialization) semanticObject); 
				return; 
			case UsexPackage.METHOD:
				sequence_Method(context, (Method) semanticObject); 
				return; 
			case UsexPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case UsexPackage.PARAMETER:
				sequence_Parameter(context, (org.xtext.uma.usex.usex.Parameter) semanticObject); 
				return; 
			case UsexPackage.POSTCONDITION:
				sequence_Postcondition(context, (Postcondition) semanticObject); 
				return; 
			case UsexPackage.PRECONDITION:
				sequence_Precondition(context, (Precondition) semanticObject); 
				return; 
			case UsexPackage.PRIMITIVE_TYPE:
				sequence_PrimitiveType(context, (PrimitiveType) semanticObject); 
				return; 
			case UsexPackage.QUERY:
				sequence_Query(context, (Query) semanticObject); 
				return; 
			case UsexPackage.RELATION_BODY:
				sequence_RelationBody(context, (RelationBody) semanticObject); 
				return; 
			case UsexPackage.RELATION_MEMBER:
				sequence_RelationMember(context, (RelationMember) semanticObject); 
				return; 
			case UsexPackage.SIMPLE_CARDINALITY:
				sequence_SimpleCardinality(context, (SimpleCardinality) semanticObject); 
				return; 
			case UsexPackage.STRING_INITIALIZATION:
				sequence_StringInitialization(context, (StringInitialization) semanticObject); 
				return; 
			case UsexPackage.USE_CLASS:
				sequence_UseClass(context, (UseClass) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     AbstractElement returns Association
	 *     Relation returns Association
	 *     Association returns Association
	 *
	 * Constraint:
	 *     (name=ID relationBody=RelationBody)
	 */
	protected void sequence_Association(ISerializationContext context, Association semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UsexPackage.Literals.ABSTRACT_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UsexPackage.Literals.ABSTRACT_ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, UsexPackage.Literals.RELATION__RELATION_BODY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UsexPackage.Literals.RELATION__RELATION_BODY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAssociationAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getAssociationAccess().getRelationBodyRelationBodyParserRuleCall_3_0(), semanticObject.getRelationBody());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CardinalityValue returns AsteriskCardinality
	 *     AsteriskCardinality returns AsteriskCardinality
	 *
	 * Constraint:
	 *     value=ASTERISK
	 */
	protected void sequence_AsteriskCardinality(ISerializationContext context, AsteriskCardinality semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UsexPackage.Literals.ASTERISK_CARDINALITY__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UsexPackage.Literals.ASTERISK_CARDINALITY__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAsteriskCardinalityAccess().getValueASTERISKTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Attribute returns Attribute
	 *
	 * Constraint:
	 *     (name=ID type=AttributeType initialization=AttributeInitialization? derivedFrom=ID?)
	 */
	protected void sequence_Attribute(ISerializationContext context, Attribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttributeInitialization returns BooleanInitialization
	 *     BooleanInitialization returns BooleanInitialization
	 *
	 * Constraint:
	 *     value=BOOLEAN
	 */
	protected void sequence_BooleanInitialization(ISerializationContext context, BooleanInitialization semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UsexPackage.Literals.BOOLEAN_INITIALIZATION__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UsexPackage.Literals.BOOLEAN_INITIALIZATION__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBooleanInitializationAccess().getValueBOOLEANTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AttributeType returns ClassType
	 *     ClassType returns ClassType
	 *
	 * Constraint:
	 *     type=[UseClass|ID]
	 */
	protected void sequence_ClassType(ISerializationContext context, ClassType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UsexPackage.Literals.CLASS_TYPE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UsexPackage.Literals.CLASS_TYPE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getClassTypeAccess().getTypeUseClassIDTerminalRuleCall_0_1(), semanticObject.eGet(UsexPackage.Literals.CLASS_TYPE__TYPE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AbstractElement returns Composition
	 *     Relation returns Composition
	 *     Composition returns Composition
	 *
	 * Constraint:
	 *     (name=ID relationBody=RelationBody)
	 */
	protected void sequence_Composition(ISerializationContext context, Composition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UsexPackage.Literals.ABSTRACT_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UsexPackage.Literals.ABSTRACT_ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, UsexPackage.Literals.RELATION__RELATION_BODY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UsexPackage.Literals.RELATION__RELATION_BODY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCompositionAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getCompositionAccess().getRelationBodyRelationBodyParserRuleCall_3_0(), semanticObject.getRelationBody());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ConditionBody returns ConditionBody
	 *
	 * Constraint:
	 *     (name=ID? condition=ID)
	 */
	protected void sequence_ConditionBody(ISerializationContext context, ConditionBody semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Constraint returns Constraint
	 *
	 * Constraint:
	 *     conditionBody=ConditionBody
	 */
	protected void sequence_Constraint(ISerializationContext context, Constraint semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UsexPackage.Literals.CONSTRAINT__CONDITION_BODY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UsexPackage.Literals.CONSTRAINT__CONDITION_BODY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConstraintAccess().getConditionBodyConditionBodyParserRuleCall_1_0(), semanticObject.getConditionBody());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CardinalityType returns DoubleCardinality
	 *     DoubleCardinality returns DoubleCardinality
	 *
	 * Constraint:
	 *     (originCardinality=CardinalityValue destinyCardinality=CardinalityValue)
	 */
	protected void sequence_DoubleCardinality(ISerializationContext context, DoubleCardinality semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UsexPackage.Literals.DOUBLE_CARDINALITY__ORIGIN_CARDINALITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UsexPackage.Literals.DOUBLE_CARDINALITY__ORIGIN_CARDINALITY));
			if (transientValues.isValueTransient(semanticObject, UsexPackage.Literals.DOUBLE_CARDINALITY__DESTINY_CARDINALITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UsexPackage.Literals.DOUBLE_CARDINALITY__DESTINY_CARDINALITY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDoubleCardinalityAccess().getOriginCardinalityCardinalityValueParserRuleCall_0_0(), semanticObject.getOriginCardinality());
		feeder.accept(grammarAccess.getDoubleCardinalityAccess().getDestinyCardinalityCardinalityValueParserRuleCall_2_0(), semanticObject.getDestinyCardinality());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AttributeInitialization returns DoubleInitialization
	 *     DoubleInitialization returns DoubleInitialization
	 *
	 * Constraint:
	 *     value=DOUBLE
	 */
	protected void sequence_DoubleInitialization(ISerializationContext context, DoubleInitialization semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UsexPackage.Literals.DOUBLE_INITIALIZATION__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UsexPackage.Literals.DOUBLE_INITIALIZATION__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDoubleInitializationAccess().getValueDOUBLETerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CardinalityValue returns IntCardinality
	 *     IntCardinality returns IntCardinality
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_IntCardinality(ISerializationContext context, IntCardinality semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UsexPackage.Literals.INT_CARDINALITY__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UsexPackage.Literals.INT_CARDINALITY__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntCardinalityAccess().getValueINTTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AttributeInitialization returns IntegerInitialization
	 *     IntegerInitialization returns IntegerInitialization
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_IntegerInitialization(ISerializationContext context, IntegerInitialization semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UsexPackage.Literals.INTEGER_INITIALIZATION__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UsexPackage.Literals.INTEGER_INITIALIZATION__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntegerInitializationAccess().getValueINTTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Operation returns Method
	 *     Method returns Method
	 *
	 * Constraint:
	 *     (name=ID inputParameters+=Parameter* returnParameter=AttributeType? operationBody=ID? conditions+=Condition*)
	 */
	protected void sequence_Method(ISerializationContext context, Method semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (name=ID elements+=AbstractElement*)
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns Parameter
	 *
	 * Constraint:
	 *     (name=ID type=AttributeType)
	 */
	protected void sequence_Parameter(ISerializationContext context, org.xtext.uma.usex.usex.Parameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UsexPackage.Literals.PARAMETER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UsexPackage.Literals.PARAMETER__NAME));
			if (transientValues.isValueTransient(semanticObject, UsexPackage.Literals.PARAMETER__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UsexPackage.Literals.PARAMETER__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getParameterAccess().getTypeAttributeTypeParserRuleCall_2_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Condition returns Postcondition
	 *     Postcondition returns Postcondition
	 *
	 * Constraint:
	 *     conditionBody=ConditionBody
	 */
	protected void sequence_Postcondition(ISerializationContext context, Postcondition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UsexPackage.Literals.CONDITION__CONDITION_BODY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UsexPackage.Literals.CONDITION__CONDITION_BODY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPostconditionAccess().getConditionBodyConditionBodyParserRuleCall_1_0(), semanticObject.getConditionBody());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Condition returns Precondition
	 *     Precondition returns Precondition
	 *
	 * Constraint:
	 *     conditionBody=ConditionBody
	 */
	protected void sequence_Precondition(ISerializationContext context, Precondition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UsexPackage.Literals.CONDITION__CONDITION_BODY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UsexPackage.Literals.CONDITION__CONDITION_BODY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPreconditionAccess().getConditionBodyConditionBodyParserRuleCall_1_0(), semanticObject.getConditionBody());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AttributeType returns PrimitiveType
	 *     PrimitiveType returns PrimitiveType
	 *
	 * Constraint:
	 *     (type='String' | type='Real' | type='Integer' | type='Boolean')
	 */
	protected void sequence_PrimitiveType(ISerializationContext context, PrimitiveType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Operation returns Query
	 *     Query returns Query
	 *
	 * Constraint:
	 *     (name=ID inputParameters+=Parameter* returnParameter=AttributeType operationBody=ID)
	 */
	protected void sequence_Query(ISerializationContext context, Query semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RelationBody returns RelationBody
	 *
	 * Constraint:
	 *     (originClass=RelationMember destinyClass=RelationMember)
	 */
	protected void sequence_RelationBody(ISerializationContext context, RelationBody semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UsexPackage.Literals.RELATION_BODY__ORIGIN_CLASS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UsexPackage.Literals.RELATION_BODY__ORIGIN_CLASS));
			if (transientValues.isValueTransient(semanticObject, UsexPackage.Literals.RELATION_BODY__DESTINY_CLASS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UsexPackage.Literals.RELATION_BODY__DESTINY_CLASS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRelationBodyAccess().getOriginClassRelationMemberParserRuleCall_0_0(), semanticObject.getOriginClass());
		feeder.accept(grammarAccess.getRelationBodyAccess().getDestinyClassRelationMemberParserRuleCall_1_0(), semanticObject.getDestinyClass());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RelationMember returns RelationMember
	 *
	 * Constraint:
	 *     (class=[UseClass|ID] cardinality=CardinalityType roleName=ID)
	 */
	protected void sequence_RelationMember(ISerializationContext context, RelationMember semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UsexPackage.Literals.RELATION_MEMBER__CLASS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UsexPackage.Literals.RELATION_MEMBER__CLASS));
			if (transientValues.isValueTransient(semanticObject, UsexPackage.Literals.RELATION_MEMBER__CARDINALITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UsexPackage.Literals.RELATION_MEMBER__CARDINALITY));
			if (transientValues.isValueTransient(semanticObject, UsexPackage.Literals.RELATION_MEMBER__ROLE_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UsexPackage.Literals.RELATION_MEMBER__ROLE_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRelationMemberAccess().getClassUseClassIDTerminalRuleCall_0_0_1(), semanticObject.eGet(UsexPackage.Literals.RELATION_MEMBER__CLASS, false));
		feeder.accept(grammarAccess.getRelationMemberAccess().getCardinalityCardinalityTypeParserRuleCall_2_0(), semanticObject.getCardinality());
		feeder.accept(grammarAccess.getRelationMemberAccess().getRoleNameIDTerminalRuleCall_5_0(), semanticObject.getRoleName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CardinalityType returns SimpleCardinality
	 *     SimpleCardinality returns SimpleCardinality
	 *
	 * Constraint:
	 *     cardinality=CardinalityValue
	 */
	protected void sequence_SimpleCardinality(ISerializationContext context, SimpleCardinality semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UsexPackage.Literals.SIMPLE_CARDINALITY__CARDINALITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UsexPackage.Literals.SIMPLE_CARDINALITY__CARDINALITY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSimpleCardinalityAccess().getCardinalityCardinalityValueParserRuleCall_0(), semanticObject.getCardinality());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AttributeInitialization returns StringInitialization
	 *     StringInitialization returns StringInitialization
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_StringInitialization(ISerializationContext context, StringInitialization semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UsexPackage.Literals.STRING_INITIALIZATION__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UsexPackage.Literals.STRING_INITIALIZATION__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStringInitializationAccess().getValueSTRINGTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AbstractElement returns UseClass
	 *     UseClass returns UseClass
	 *
	 * Constraint:
	 *     (name=ID attributes+=Attribute* operations+=Operation* constraints+=Constraint*)
	 */
	protected void sequence_UseClass(ISerializationContext context, UseClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
