/**
 * generated by Xtext 2.25.0
 */
package org.xtext.uma.usex.usex.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import org.xtext.uma.usex.usex.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.xtext.uma.usex.usex.UsexPackage
 * @generated
 */
public class UsexSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static UsexPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UsexSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = UsexPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case UsexPackage.MODEL:
      {
        Model model = (Model)theEObject;
        T result = caseModel(model);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.GENERAL_CONSTRAINT:
      {
        GeneralConstraint generalConstraint = (GeneralConstraint)theEObject;
        T result = caseGeneralConstraint(generalConstraint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.ABSTRACT_ELEMENT:
      {
        AbstractElement abstractElement = (AbstractElement)theEObject;
        T result = caseAbstractElement(abstractElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.USE_CLASS:
      {
        UseClass useClass = (UseClass)theEObject;
        T result = caseUseClass(useClass);
        if (result == null) result = caseAbstractElement(useClass);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.ENUMERATION:
      {
        Enumeration enumeration = (Enumeration)theEObject;
        T result = caseEnumeration(enumeration);
        if (result == null) result = caseAbstractElement(enumeration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.ENUMERATION_ELEM:
      {
        EnumerationElem enumerationElem = (EnumerationElem)theEObject;
        T result = caseEnumerationElem(enumerationElem);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.ATTRIBUTE:
      {
        Attribute attribute = (Attribute)theEObject;
        T result = caseAttribute(attribute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.ATTRIBUTE_TYPE:
      {
        AttributeType attributeType = (AttributeType)theEObject;
        T result = caseAttributeType(attributeType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.PRIMITIVE_TYPE:
      {
        PrimitiveType primitiveType = (PrimitiveType)theEObject;
        T result = casePrimitiveType(primitiveType);
        if (result == null) result = caseAttributeType(primitiveType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.CLASS_TYPE:
      {
        ClassType classType = (ClassType)theEObject;
        T result = caseClassType(classType);
        if (result == null) result = caseAttributeType(classType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.COLLECTION_TYPE:
      {
        CollectionType collectionType = (CollectionType)theEObject;
        T result = caseCollectionType(collectionType);
        if (result == null) result = caseAttributeType(collectionType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.OPERATION:
      {
        Operation operation = (Operation)theEObject;
        T result = caseOperation(operation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.QUERY:
      {
        Query query = (Query)theEObject;
        T result = caseQuery(query);
        if (result == null) result = caseOperation(query);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.METHOD:
      {
        Method method = (Method)theEObject;
        T result = caseMethod(method);
        if (result == null) result = caseOperation(method);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.METHOD_BODY:
      {
        MethodBody methodBody = (MethodBody)theEObject;
        T result = caseMethodBody(methodBody);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.PARAMETER:
      {
        Parameter parameter = (Parameter)theEObject;
        T result = caseParameter(parameter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.CONDITION:
      {
        Condition condition = (Condition)theEObject;
        T result = caseCondition(condition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.PRECONDITION:
      {
        Precondition precondition = (Precondition)theEObject;
        T result = casePrecondition(precondition);
        if (result == null) result = caseCondition(precondition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.POSTCONDITION:
      {
        Postcondition postcondition = (Postcondition)theEObject;
        T result = casePostcondition(postcondition);
        if (result == null) result = caseCondition(postcondition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.CONSTRAINT:
      {
        Constraint constraint = (Constraint)theEObject;
        T result = caseConstraint(constraint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.RELATION:
      {
        Relation relation = (Relation)theEObject;
        T result = caseRelation(relation);
        if (result == null) result = caseAbstractElement(relation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.RELATION_BODY:
      {
        RelationBody relationBody = (RelationBody)theEObject;
        T result = caseRelationBody(relationBody);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.RELATION_MEMBER:
      {
        RelationMember relationMember = (RelationMember)theEObject;
        T result = caseRelationMember(relationMember);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.PRIMITIVE_TYPE_REF_CS:
      {
        PrimitiveTypeRefCS primitiveTypeRefCS = (PrimitiveTypeRefCS)theEObject;
        T result = casePrimitiveTypeRefCS(primitiveTypeRefCS);
        if (result == null) result = caseTypedRefCS(primitiveTypeRefCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.COLLECTION_TYPE_CS:
      {
        CollectionTypeCS collectionTypeCS = (CollectionTypeCS)theEObject;
        T result = caseCollectionTypeCS(collectionTypeCS);
        if (result == null) result = caseTypedRefCS(collectionTypeCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.MAP_TYPE_CS:
      {
        MapTypeCS mapTypeCS = (MapTypeCS)theEObject;
        T result = caseMapTypeCS(mapTypeCS);
        if (result == null) result = caseTypedRefCS(mapTypeCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.TUPLE_TYPE_CS:
      {
        TupleTypeCS tupleTypeCS = (TupleTypeCS)theEObject;
        T result = caseTupleTypeCS(tupleTypeCS);
        if (result == null) result = caseTypedRefCS(tupleTypeCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.TUPLE_PART_CS:
      {
        TuplePartCS tuplePartCS = (TuplePartCS)theEObject;
        T result = caseTuplePartCS(tuplePartCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.COLLECTION_PATTERN_CS:
      {
        CollectionPatternCS collectionPatternCS = (CollectionPatternCS)theEObject;
        T result = caseCollectionPatternCS(collectionPatternCS);
        if (result == null) result = caseTypedRefCS(collectionPatternCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.PATTERN_EXP_CS:
      {
        PatternExpCS patternExpCS = (PatternExpCS)theEObject;
        T result = casePatternExpCS(patternExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.TYPED_REF_CS:
      {
        TypedRefCS typedRefCS = (TypedRefCS)theEObject;
        T result = caseTypedRefCS(typedRefCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.TYPE_LITERAL_EXP_CS:
      {
        TypeLiteralExpCS typeLiteralExpCS = (TypeLiteralExpCS)theEObject;
        T result = caseTypeLiteralExpCS(typeLiteralExpCS);
        if (result == null) result = caseExpCS(typeLiteralExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.TYPE_NAME_EXP_CS:
      {
        TypeNameExpCS typeNameExpCS = (TypeNameExpCS)theEObject;
        T result = caseTypeNameExpCS(typeNameExpCS);
        if (result == null) result = caseTypedRefCS(typeNameExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.CURLY_BRACKETED_CLAUSE_CS:
      {
        CurlyBracketedClauseCS curlyBracketedClauseCS = (CurlyBracketedClauseCS)theEObject;
        T result = caseCurlyBracketedClauseCS(curlyBracketedClauseCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.SHADOW_PART_CS:
      {
        ShadowPartCS shadowPartCS = (ShadowPartCS)theEObject;
        T result = caseShadowPartCS(shadowPartCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.STRING_LITERAL_EXP_CS:
      {
        StringLiteralExpCS stringLiteralExpCS = (StringLiteralExpCS)theEObject;
        T result = caseStringLiteralExpCS(stringLiteralExpCS);
        if (result == null) result = casePrimitiveLiteralExpCS(stringLiteralExpCS);
        if (result == null) result = caseExpCS(stringLiteralExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.MULTIPLICITY_BOUNDS_CS:
      {
        MultiplicityBoundsCS multiplicityBoundsCS = (MultiplicityBoundsCS)theEObject;
        T result = caseMultiplicityBoundsCS(multiplicityBoundsCS);
        if (result == null) result = caseMultiplicityCS(multiplicityBoundsCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.MULTIPLICITY_CS:
      {
        MultiplicityCS multiplicityCS = (MultiplicityCS)theEObject;
        T result = caseMultiplicityCS(multiplicityCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.MULTIPLICITY_STRING_CS:
      {
        MultiplicityStringCS multiplicityStringCS = (MultiplicityStringCS)theEObject;
        T result = caseMultiplicityStringCS(multiplicityStringCS);
        if (result == null) result = caseMultiplicityCS(multiplicityStringCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.PATH_NAME_CS:
      {
        PathNameCS pathNameCS = (PathNameCS)theEObject;
        T result = casePathNameCS(pathNameCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.EXP_CS:
      {
        ExpCS expCS = (ExpCS)theEObject;
        T result = caseExpCS(expCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.PRIMITIVE_LITERAL_EXP_CS:
      {
        PrimitiveLiteralExpCS primitiveLiteralExpCS = (PrimitiveLiteralExpCS)theEObject;
        T result = casePrimitiveLiteralExpCS(primitiveLiteralExpCS);
        if (result == null) result = caseExpCS(primitiveLiteralExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.NAME_EXP_CS:
      {
        NameExpCS nameExpCS = (NameExpCS)theEObject;
        T result = caseNameExpCS(nameExpCS);
        if (result == null) result = caseExpCS(nameExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.SQUARE_BRACKETED_CLAUSE_CS:
      {
        SquareBracketedClauseCS squareBracketedClauseCS = (SquareBracketedClauseCS)theEObject;
        T result = caseSquareBracketedClauseCS(squareBracketedClauseCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.COLLECTION_LITERAL_EXP_CS:
      {
        CollectionLiteralExpCS collectionLiteralExpCS = (CollectionLiteralExpCS)theEObject;
        T result = caseCollectionLiteralExpCS(collectionLiteralExpCS);
        if (result == null) result = caseExpCS(collectionLiteralExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.COLLECTION_LITERAL_PART_CS:
      {
        CollectionLiteralPartCS collectionLiteralPartCS = (CollectionLiteralPartCS)theEObject;
        T result = caseCollectionLiteralPartCS(collectionLiteralPartCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.LAMBDA_LITERAL_EXP_CS:
      {
        LambdaLiteralExpCS lambdaLiteralExpCS = (LambdaLiteralExpCS)theEObject;
        T result = caseLambdaLiteralExpCS(lambdaLiteralExpCS);
        if (result == null) result = caseExpCS(lambdaLiteralExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.MAP_LITERAL_EXP_CS:
      {
        MapLiteralExpCS mapLiteralExpCS = (MapLiteralExpCS)theEObject;
        T result = caseMapLiteralExpCS(mapLiteralExpCS);
        if (result == null) result = caseExpCS(mapLiteralExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.MAP_LITERAL_PART_CS:
      {
        MapLiteralPartCS mapLiteralPartCS = (MapLiteralPartCS)theEObject;
        T result = caseMapLiteralPartCS(mapLiteralPartCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.TUPLE_LITERAL_EXP_CS:
      {
        TupleLiteralExpCS tupleLiteralExpCS = (TupleLiteralExpCS)theEObject;
        T result = caseTupleLiteralExpCS(tupleLiteralExpCS);
        if (result == null) result = caseExpCS(tupleLiteralExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.TUPLE_LITERAL_PART_CS:
      {
        TupleLiteralPartCS tupleLiteralPartCS = (TupleLiteralPartCS)theEObject;
        T result = caseTupleLiteralPartCS(tupleLiteralPartCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.NUMBER_LITERAL_EXP_CS:
      {
        NumberLiteralExpCS numberLiteralExpCS = (NumberLiteralExpCS)theEObject;
        T result = caseNumberLiteralExpCS(numberLiteralExpCS);
        if (result == null) result = casePrimitiveLiteralExpCS(numberLiteralExpCS);
        if (result == null) result = caseExpCS(numberLiteralExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.BOOLEAN_LITERAL_EXP_CS:
      {
        BooleanLiteralExpCS booleanLiteralExpCS = (BooleanLiteralExpCS)theEObject;
        T result = caseBooleanLiteralExpCS(booleanLiteralExpCS);
        if (result == null) result = casePrimitiveLiteralExpCS(booleanLiteralExpCS);
        if (result == null) result = caseExpCS(booleanLiteralExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.UNLIMITED_NATURAL_LITERAL_EXP_CS:
      {
        UnlimitedNaturalLiteralExpCS unlimitedNaturalLiteralExpCS = (UnlimitedNaturalLiteralExpCS)theEObject;
        T result = caseUnlimitedNaturalLiteralExpCS(unlimitedNaturalLiteralExpCS);
        if (result == null) result = casePrimitiveLiteralExpCS(unlimitedNaturalLiteralExpCS);
        if (result == null) result = caseExpCS(unlimitedNaturalLiteralExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.INVALID_LITERAL_EXP_CS:
      {
        InvalidLiteralExpCS invalidLiteralExpCS = (InvalidLiteralExpCS)theEObject;
        T result = caseInvalidLiteralExpCS(invalidLiteralExpCS);
        if (result == null) result = casePrimitiveLiteralExpCS(invalidLiteralExpCS);
        if (result == null) result = caseExpCS(invalidLiteralExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.NULL_LITERAL_EXP_CS:
      {
        NullLiteralExpCS nullLiteralExpCS = (NullLiteralExpCS)theEObject;
        T result = caseNullLiteralExpCS(nullLiteralExpCS);
        if (result == null) result = casePrimitiveLiteralExpCS(nullLiteralExpCS);
        if (result == null) result = caseExpCS(nullLiteralExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.NESTED_EXP_CS:
      {
        NestedExpCS nestedExpCS = (NestedExpCS)theEObject;
        T result = caseNestedExpCS(nestedExpCS);
        if (result == null) result = caseExpCS(nestedExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.IF_EXP_CS:
      {
        IfExpCS ifExpCS = (IfExpCS)theEObject;
        T result = caseIfExpCS(ifExpCS);
        if (result == null) result = caseExpCS(ifExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.IF_THEN_EXP_CS:
      {
        IfThenExpCS ifThenExpCS = (IfThenExpCS)theEObject;
        T result = caseIfThenExpCS(ifThenExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.LET_EXP_CS:
      {
        LetExpCS letExpCS = (LetExpCS)theEObject;
        T result = caseLetExpCS(letExpCS);
        if (result == null) result = caseExpCS(letExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.LET_VARIABLE_CS:
      {
        LetVariableCS letVariableCS = (LetVariableCS)theEObject;
        T result = caseLetVariableCS(letVariableCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.ROUND_BRACKETED_CLAUSE_CS:
      {
        RoundBracketedClauseCS roundBracketedClauseCS = (RoundBracketedClauseCS)theEObject;
        T result = caseRoundBracketedClauseCS(roundBracketedClauseCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.NAVIGATING_ARG_CS:
      {
        NavigatingArgCS navigatingArgCS = (NavigatingArgCS)theEObject;
        T result = caseNavigatingArgCS(navigatingArgCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.VARIABLE_CS:
      {
        VariableCS variableCS = (VariableCS)theEObject;
        T result = caseVariableCS(variableCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.INFIX_EXP_CS:
      {
        InfixExpCS infixExpCS = (InfixExpCS)theEObject;
        T result = caseInfixExpCS(infixExpCS);
        if (result == null) result = caseExpCS(infixExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsexPackage.PREFIX_EXP_CS:
      {
        PrefixExpCS prefixExpCS = (PrefixExpCS)theEObject;
        T result = casePrefixExpCS(prefixExpCS);
        if (result == null) result = caseExpCS(prefixExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModel(Model object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>General Constraint</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>General Constraint</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGeneralConstraint(GeneralConstraint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Abstract Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Abstract Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAbstractElement(AbstractElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Use Class</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Use Class</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUseClass(UseClass object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Enumeration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Enumeration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnumeration(Enumeration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Enumeration Elem</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Enumeration Elem</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnumerationElem(EnumerationElem object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Attribute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Attribute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAttribute(Attribute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Attribute Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Attribute Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAttributeType(AttributeType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Primitive Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Primitive Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrimitiveType(PrimitiveType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Class Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Class Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseClassType(ClassType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Collection Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Collection Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCollectionType(CollectionType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperation(Operation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Query</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Query</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseQuery(Query object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Method</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Method</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMethod(Method object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Method Body</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Method Body</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMethodBody(MethodBody object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Parameter</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Parameter</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParameter(Parameter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCondition(Condition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Precondition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Precondition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrecondition(Precondition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Postcondition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Postcondition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePostcondition(Postcondition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Constraint</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Constraint</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConstraint(Constraint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Relation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Relation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRelation(Relation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Relation Body</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Relation Body</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRelationBody(RelationBody object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Relation Member</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Relation Member</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRelationMember(RelationMember object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Primitive Type Ref CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Primitive Type Ref CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrimitiveTypeRefCS(PrimitiveTypeRefCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Collection Type CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Collection Type CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCollectionTypeCS(CollectionTypeCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Map Type CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Map Type CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMapTypeCS(MapTypeCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Tuple Type CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Tuple Type CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTupleTypeCS(TupleTypeCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Tuple Part CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Tuple Part CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTuplePartCS(TuplePartCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Collection Pattern CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Collection Pattern CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCollectionPatternCS(CollectionPatternCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pattern Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pattern Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePatternExpCS(PatternExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Typed Ref CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Typed Ref CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypedRefCS(TypedRefCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Literal Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Literal Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeLiteralExpCS(TypeLiteralExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Name Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Name Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeNameExpCS(TypeNameExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Curly Bracketed Clause CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Curly Bracketed Clause CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCurlyBracketedClauseCS(CurlyBracketedClauseCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Shadow Part CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Shadow Part CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseShadowPartCS(ShadowPartCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>String Literal Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>String Literal Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStringLiteralExpCS(StringLiteralExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Multiplicity Bounds CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Multiplicity Bounds CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMultiplicityBoundsCS(MultiplicityBoundsCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Multiplicity CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Multiplicity CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMultiplicityCS(MultiplicityCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Multiplicity String CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Multiplicity String CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMultiplicityStringCS(MultiplicityStringCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Path Name CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Path Name CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePathNameCS(PathNameCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpCS(ExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Primitive Literal Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Primitive Literal Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrimitiveLiteralExpCS(PrimitiveLiteralExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Name Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Name Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNameExpCS(NameExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Square Bracketed Clause CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Square Bracketed Clause CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSquareBracketedClauseCS(SquareBracketedClauseCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Collection Literal Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Collection Literal Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCollectionLiteralExpCS(CollectionLiteralExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Collection Literal Part CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Collection Literal Part CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCollectionLiteralPartCS(CollectionLiteralPartCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Lambda Literal Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Lambda Literal Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLambdaLiteralExpCS(LambdaLiteralExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Map Literal Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Map Literal Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMapLiteralExpCS(MapLiteralExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Map Literal Part CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Map Literal Part CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMapLiteralPartCS(MapLiteralPartCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Tuple Literal Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Tuple Literal Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTupleLiteralExpCS(TupleLiteralExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Tuple Literal Part CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Tuple Literal Part CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTupleLiteralPartCS(TupleLiteralPartCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Number Literal Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Number Literal Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNumberLiteralExpCS(NumberLiteralExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Boolean Literal Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Boolean Literal Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBooleanLiteralExpCS(BooleanLiteralExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Unlimited Natural Literal Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Unlimited Natural Literal Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUnlimitedNaturalLiteralExpCS(UnlimitedNaturalLiteralExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Invalid Literal Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Invalid Literal Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInvalidLiteralExpCS(InvalidLiteralExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Null Literal Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Null Literal Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNullLiteralExpCS(NullLiteralExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Nested Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Nested Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNestedExpCS(NestedExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>If Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>If Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIfExpCS(IfExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>If Then Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>If Then Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIfThenExpCS(IfThenExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Let Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Let Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLetExpCS(LetExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Let Variable CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Let Variable CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLetVariableCS(LetVariableCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Round Bracketed Clause CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Round Bracketed Clause CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRoundBracketedClauseCS(RoundBracketedClauseCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Navigating Arg CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Navigating Arg CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNavigatingArgCS(NavigatingArgCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Variable CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Variable CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVariableCS(VariableCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Infix Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Infix Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInfixExpCS(InfixExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Prefix Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Prefix Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrefixExpCS(PrefixExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //UsexSwitch
