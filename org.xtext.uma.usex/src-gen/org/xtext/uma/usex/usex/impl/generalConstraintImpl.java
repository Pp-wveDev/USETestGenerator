/**
 * generated by Xtext 2.25.0
 */
package org.xtext.uma.usex.usex.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.uma.usex.usex.ExpCS;
import org.xtext.uma.usex.usex.UseClass;
import org.xtext.uma.usex.usex.UsexPackage;
import org.xtext.uma.usex.usex.generalConstraint;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>general Constraint</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.uma.usex.usex.impl.generalConstraintImpl#getContextClass <em>Context Class</em>}</li>
 *   <li>{@link org.xtext.uma.usex.usex.impl.generalConstraintImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.uma.usex.usex.impl.generalConstraintImpl#getConstraintBody <em>Constraint Body</em>}</li>
 * </ul>
 *
 * @generated
 */
public class generalConstraintImpl extends MinimalEObjectImpl.Container implements generalConstraint
{
  /**
   * The cached value of the '{@link #getContextClass() <em>Context Class</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getContextClass()
   * @generated
   * @ordered
   */
  protected UseClass contextClass;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getConstraintBody() <em>Constraint Body</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConstraintBody()
   * @generated
   * @ordered
   */
  protected ExpCS constraintBody;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected generalConstraintImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return UsexPackage.Literals.GENERAL_CONSTRAINT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UseClass getContextClass()
  {
    if (contextClass != null && contextClass.eIsProxy())
    {
      InternalEObject oldContextClass = (InternalEObject)contextClass;
      contextClass = (UseClass)eResolveProxy(oldContextClass);
      if (contextClass != oldContextClass)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, UsexPackage.GENERAL_CONSTRAINT__CONTEXT_CLASS, oldContextClass, contextClass));
      }
    }
    return contextClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UseClass basicGetContextClass()
  {
    return contextClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setContextClass(UseClass newContextClass)
  {
    UseClass oldContextClass = contextClass;
    contextClass = newContextClass;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UsexPackage.GENERAL_CONSTRAINT__CONTEXT_CLASS, oldContextClass, contextClass));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UsexPackage.GENERAL_CONSTRAINT__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpCS getConstraintBody()
  {
    return constraintBody;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetConstraintBody(ExpCS newConstraintBody, NotificationChain msgs)
  {
    ExpCS oldConstraintBody = constraintBody;
    constraintBody = newConstraintBody;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, UsexPackage.GENERAL_CONSTRAINT__CONSTRAINT_BODY, oldConstraintBody, newConstraintBody);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConstraintBody(ExpCS newConstraintBody)
  {
    if (newConstraintBody != constraintBody)
    {
      NotificationChain msgs = null;
      if (constraintBody != null)
        msgs = ((InternalEObject)constraintBody).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - UsexPackage.GENERAL_CONSTRAINT__CONSTRAINT_BODY, null, msgs);
      if (newConstraintBody != null)
        msgs = ((InternalEObject)newConstraintBody).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - UsexPackage.GENERAL_CONSTRAINT__CONSTRAINT_BODY, null, msgs);
      msgs = basicSetConstraintBody(newConstraintBody, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UsexPackage.GENERAL_CONSTRAINT__CONSTRAINT_BODY, newConstraintBody, newConstraintBody));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case UsexPackage.GENERAL_CONSTRAINT__CONSTRAINT_BODY:
        return basicSetConstraintBody(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case UsexPackage.GENERAL_CONSTRAINT__CONTEXT_CLASS:
        if (resolve) return getContextClass();
        return basicGetContextClass();
      case UsexPackage.GENERAL_CONSTRAINT__NAME:
        return getName();
      case UsexPackage.GENERAL_CONSTRAINT__CONSTRAINT_BODY:
        return getConstraintBody();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case UsexPackage.GENERAL_CONSTRAINT__CONTEXT_CLASS:
        setContextClass((UseClass)newValue);
        return;
      case UsexPackage.GENERAL_CONSTRAINT__NAME:
        setName((String)newValue);
        return;
      case UsexPackage.GENERAL_CONSTRAINT__CONSTRAINT_BODY:
        setConstraintBody((ExpCS)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case UsexPackage.GENERAL_CONSTRAINT__CONTEXT_CLASS:
        setContextClass((UseClass)null);
        return;
      case UsexPackage.GENERAL_CONSTRAINT__NAME:
        setName(NAME_EDEFAULT);
        return;
      case UsexPackage.GENERAL_CONSTRAINT__CONSTRAINT_BODY:
        setConstraintBody((ExpCS)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case UsexPackage.GENERAL_CONSTRAINT__CONTEXT_CLASS:
        return contextClass != null;
      case UsexPackage.GENERAL_CONSTRAINT__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case UsexPackage.GENERAL_CONSTRAINT__CONSTRAINT_BODY:
        return constraintBody != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //generalConstraintImpl
