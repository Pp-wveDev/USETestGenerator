/**
 * generated by Xtext 2.25.0
 */
package org.xtext.uma.usex.usex.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.uma.usex.usex.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class UsexFactoryImpl extends EFactoryImpl implements UsexFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static UsexFactory init()
  {
    try
    {
      UsexFactory theUsexFactory = (UsexFactory)EPackage.Registry.INSTANCE.getEFactory(UsexPackage.eNS_URI);
      if (theUsexFactory != null)
      {
        return theUsexFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new UsexFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UsexFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case UsexPackage.MODEL: return createModel();
      case UsexPackage.ABSTRACT_ELEMENT: return createAbstractElement();
      case UsexPackage.USE_CLASS: return createUseClass();
      case UsexPackage.ATTRIBUTE: return createAttribute();
      case UsexPackage.ATTRIBUTE_TYPE: return createAttributeType();
      case UsexPackage.PRIMITIVE_TYPE: return createPrimitiveType();
      case UsexPackage.CLASS_TYPE: return createClassType();
      case UsexPackage.ATTRIBUTE_INITIALIZATION: return createAttributeInitialization();
      case UsexPackage.DOUBLE_INITIALIZATION: return createDoubleInitialization();
      case UsexPackage.BOOLEAN_INITIALIZATION: return createBooleanInitialization();
      case UsexPackage.INTEGER_INITIALIZATION: return createIntegerInitialization();
      case UsexPackage.STRING_INITIALIZATION: return createStringInitialization();
      case UsexPackage.OPERATION: return createOperation();
      case UsexPackage.METHOD: return createMethod();
      case UsexPackage.QUERY: return createQuery();
      case UsexPackage.PARAMETER: return createParameter();
      case UsexPackage.CONDITION: return createCondition();
      case UsexPackage.PRECONDITION: return createPrecondition();
      case UsexPackage.POSTCONDITION: return createPostcondition();
      case UsexPackage.CONDITION_BODY: return createConditionBody();
      case UsexPackage.CONSTRAINT: return createConstraint();
      case UsexPackage.RELATION: return createRelation();
      case UsexPackage.ASSOCIATION: return createAssociation();
      case UsexPackage.COMPOSITION: return createComposition();
      case UsexPackage.RELATION_BODY: return createRelationBody();
      case UsexPackage.RELATION_MEMBER: return createRelationMember();
      case UsexPackage.CARDINALITY_TYPE: return createCardinalityType();
      case UsexPackage.SIMPLE_CARDINALITY: return createSimpleCardinality();
      case UsexPackage.DOUBLE_CARDINALITY: return createDoubleCardinality();
      case UsexPackage.CARDINALITY_VALUE: return createCardinalityValue();
      case UsexPackage.INT_CARDINALITY: return createIntCardinality();
      case UsexPackage.ASTERISK_CARDINALITY: return createAsteriskCardinality();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AbstractElement createAbstractElement()
  {
    AbstractElementImpl abstractElement = new AbstractElementImpl();
    return abstractElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UseClass createUseClass()
  {
    UseClassImpl useClass = new UseClassImpl();
    return useClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Attribute createAttribute()
  {
    AttributeImpl attribute = new AttributeImpl();
    return attribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AttributeType createAttributeType()
  {
    AttributeTypeImpl attributeType = new AttributeTypeImpl();
    return attributeType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PrimitiveType createPrimitiveType()
  {
    PrimitiveTypeImpl primitiveType = new PrimitiveTypeImpl();
    return primitiveType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ClassType createClassType()
  {
    ClassTypeImpl classType = new ClassTypeImpl();
    return classType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AttributeInitialization createAttributeInitialization()
  {
    AttributeInitializationImpl attributeInitialization = new AttributeInitializationImpl();
    return attributeInitialization;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DoubleInitialization createDoubleInitialization()
  {
    DoubleInitializationImpl doubleInitialization = new DoubleInitializationImpl();
    return doubleInitialization;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BooleanInitialization createBooleanInitialization()
  {
    BooleanInitializationImpl booleanInitialization = new BooleanInitializationImpl();
    return booleanInitialization;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntegerInitialization createIntegerInitialization()
  {
    IntegerInitializationImpl integerInitialization = new IntegerInitializationImpl();
    return integerInitialization;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringInitialization createStringInitialization()
  {
    StringInitializationImpl stringInitialization = new StringInitializationImpl();
    return stringInitialization;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Operation createOperation()
  {
    OperationImpl operation = new OperationImpl();
    return operation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Method createMethod()
  {
    MethodImpl method = new MethodImpl();
    return method;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Query createQuery()
  {
    QueryImpl query = new QueryImpl();
    return query;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Parameter createParameter()
  {
    ParameterImpl parameter = new ParameterImpl();
    return parameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Condition createCondition()
  {
    ConditionImpl condition = new ConditionImpl();
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Precondition createPrecondition()
  {
    PreconditionImpl precondition = new PreconditionImpl();
    return precondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Postcondition createPostcondition()
  {
    PostconditionImpl postcondition = new PostconditionImpl();
    return postcondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConditionBody createConditionBody()
  {
    ConditionBodyImpl conditionBody = new ConditionBodyImpl();
    return conditionBody;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Constraint createConstraint()
  {
    ConstraintImpl constraint = new ConstraintImpl();
    return constraint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Relation createRelation()
  {
    RelationImpl relation = new RelationImpl();
    return relation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Association createAssociation()
  {
    AssociationImpl association = new AssociationImpl();
    return association;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Composition createComposition()
  {
    CompositionImpl composition = new CompositionImpl();
    return composition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RelationBody createRelationBody()
  {
    RelationBodyImpl relationBody = new RelationBodyImpl();
    return relationBody;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RelationMember createRelationMember()
  {
    RelationMemberImpl relationMember = new RelationMemberImpl();
    return relationMember;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CardinalityType createCardinalityType()
  {
    CardinalityTypeImpl cardinalityType = new CardinalityTypeImpl();
    return cardinalityType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SimpleCardinality createSimpleCardinality()
  {
    SimpleCardinalityImpl simpleCardinality = new SimpleCardinalityImpl();
    return simpleCardinality;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DoubleCardinality createDoubleCardinality()
  {
    DoubleCardinalityImpl doubleCardinality = new DoubleCardinalityImpl();
    return doubleCardinality;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CardinalityValue createCardinalityValue()
  {
    CardinalityValueImpl cardinalityValue = new CardinalityValueImpl();
    return cardinalityValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntCardinality createIntCardinality()
  {
    IntCardinalityImpl intCardinality = new IntCardinalityImpl();
    return intCardinality;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AsteriskCardinality createAsteriskCardinality()
  {
    AsteriskCardinalityImpl asteriskCardinality = new AsteriskCardinalityImpl();
    return asteriskCardinality;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UsexPackage getUsexPackage()
  {
    return (UsexPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static UsexPackage getPackage()
  {
    return UsexPackage.eINSTANCE;
  }

} //UsexFactoryImpl
