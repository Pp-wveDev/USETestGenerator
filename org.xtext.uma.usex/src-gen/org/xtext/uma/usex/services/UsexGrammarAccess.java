/*
 * generated by Xtext 2.25.0
 */
package org.xtext.uma.usex.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class UsexGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.uma.usex.Usex.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsAbstractElementParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		
		//Model:
		//    'model' name=ID elements+=(AbstractElement)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'model' name=ID elements+=(AbstractElement)*
		public Group getGroup() { return cGroup; }
		
		//'model'
		public Keyword getModelKeyword_0() { return cModelKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//elements+=(AbstractElement)*
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//(AbstractElement)
		public RuleCall getElementsAbstractElementParserRuleCall_2_0() { return cElementsAbstractElementParserRuleCall_2_0; }
	}
	public class AbstractElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.uma.usex.Usex.AbstractElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRelationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUseClassParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractElement:
		//    Relation | UseClass
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Relation | UseClass
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Relation
		public RuleCall getRelationParserRuleCall_0() { return cRelationParserRuleCall_0; }
		
		//UseClass
		public RuleCall getUseClassParserRuleCall_1() { return cUseClassParserRuleCall_1; }
	}
	public class UseClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.uma.usex.Usex.UseClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAttributesKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAttributesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAttributesAttributeParserRuleCall_2_1_0 = (RuleCall)cAttributesAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cOperationsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOperationsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOperationsOperationParserRuleCall_3_1_0 = (RuleCall)cOperationsAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cConstraintsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cConstraintsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cConstraintsConstraintParserRuleCall_4_1_0 = (RuleCall)cConstraintsAssignment_4_1.eContents().get(0);
		private final Keyword cEndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// --------------------------------- CLASSES ---------------------------------
		//UseClass:
		//    'class' name=ID
		//    ('attributes' attributes+=(Attribute)*)?
		//    ('operations' operations+=(Operation)*)?
		//    ('constraints' constraints+=(Constraint)*)?
		//    'end'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'class' name=ID
		//('attributes' attributes+=(Attribute)*)?
		//('operations' operations+=(Operation)*)?
		//('constraints' constraints+=(Constraint)*)?
		//'end'
		public Group getGroup() { return cGroup; }
		
		//'class'
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('attributes' attributes+=(Attribute)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'attributes'
		public Keyword getAttributesKeyword_2_0() { return cAttributesKeyword_2_0; }
		
		//attributes+=(Attribute)*
		public Assignment getAttributesAssignment_2_1() { return cAttributesAssignment_2_1; }
		
		//(Attribute)
		public RuleCall getAttributesAttributeParserRuleCall_2_1_0() { return cAttributesAttributeParserRuleCall_2_1_0; }
		
		//('operations' operations+=(Operation)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'operations'
		public Keyword getOperationsKeyword_3_0() { return cOperationsKeyword_3_0; }
		
		//operations+=(Operation)*
		public Assignment getOperationsAssignment_3_1() { return cOperationsAssignment_3_1; }
		
		//(Operation)
		public RuleCall getOperationsOperationParserRuleCall_3_1_0() { return cOperationsOperationParserRuleCall_3_1_0; }
		
		//('constraints' constraints+=(Constraint)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'constraints'
		public Keyword getConstraintsKeyword_4_0() { return cConstraintsKeyword_4_0; }
		
		//constraints+=(Constraint)*
		public Assignment getConstraintsAssignment_4_1() { return cConstraintsAssignment_4_1; }
		
		//(Constraint)
		public RuleCall getConstraintsConstraintParserRuleCall_4_1_0() { return cConstraintsConstraintParserRuleCall_4_1_0; }
		
		//'end'
		public Keyword getEndKeyword_5() { return cEndKeyword_5; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.uma.usex.Usex.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeAttributeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cInitKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cColonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cInitializationAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cInitializationAttributeInitializationParserRuleCall_3_2_0 = (RuleCall)cInitializationAssignment_3_2.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cDerivedKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cColonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cDerivedFromAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cDerivedFromIDTerminalRuleCall_4_2_0 = (RuleCall)cDerivedFromAssignment_4_2.eContents().get(0);
		
		//// --------------------------------- ATTRIBUTES ---------------------------------
		//Attribute:
		//    name=ID ':' type=AttributeType
		//    ('init' ':' initialization=AttributeInitialization)?
		//    ('derived' ':' derivedFrom=ID)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' type=AttributeType
		//('init' ':' initialization=AttributeInitialization)?
		//('derived' ':' derivedFrom=ID)?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=AttributeType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//AttributeType
		public RuleCall getTypeAttributeTypeParserRuleCall_2_0() { return cTypeAttributeTypeParserRuleCall_2_0; }
		
		//('init' ':' initialization=AttributeInitialization)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'init'
		public Keyword getInitKeyword_3_0() { return cInitKeyword_3_0; }
		
		//':'
		public Keyword getColonKeyword_3_1() { return cColonKeyword_3_1; }
		
		//initialization=AttributeInitialization
		public Assignment getInitializationAssignment_3_2() { return cInitializationAssignment_3_2; }
		
		//AttributeInitialization
		public RuleCall getInitializationAttributeInitializationParserRuleCall_3_2_0() { return cInitializationAttributeInitializationParserRuleCall_3_2_0; }
		
		//('derived' ':' derivedFrom=ID)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'derived'
		public Keyword getDerivedKeyword_4_0() { return cDerivedKeyword_4_0; }
		
		//':'
		public Keyword getColonKeyword_4_1() { return cColonKeyword_4_1; }
		
		//derivedFrom=ID
		public Assignment getDerivedFromAssignment_4_2() { return cDerivedFromAssignment_4_2; }
		
		//ID
		public RuleCall getDerivedFromIDTerminalRuleCall_4_2_0() { return cDerivedFromIDTerminalRuleCall_4_2_0; }
	}
	public class AttributeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.uma.usex.Usex.AttributeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitiveTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClassTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AttributeType:
		//    (PrimitiveType | ClassType)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(PrimitiveType | ClassType)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PrimitiveType
		public RuleCall getPrimitiveTypeParserRuleCall_0() { return cPrimitiveTypeParserRuleCall_0; }
		
		//ClassType
		public RuleCall getClassTypeParserRuleCall_1() { return cClassTypeParserRuleCall_1; }
	}
	public class PrimitiveTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.uma.usex.Usex.PrimitiveType");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTypeAlternatives_0 = (Alternatives)cTypeAssignment.eContents().get(0);
		private final Keyword cTypeStringKeyword_0_0 = (Keyword)cTypeAlternatives_0.eContents().get(0);
		private final Keyword cTypeRealKeyword_0_1 = (Keyword)cTypeAlternatives_0.eContents().get(1);
		private final Keyword cTypeIntegerKeyword_0_2 = (Keyword)cTypeAlternatives_0.eContents().get(2);
		private final Keyword cTypeBooleanKeyword_0_3 = (Keyword)cTypeAlternatives_0.eContents().get(3);
		
		//PrimitiveType:
		//    type=('String' | 'Real' | 'Integer' | 'Boolean')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type=('String' | 'Real' | 'Integer' | 'Boolean')
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//('String' | 'Real' | 'Integer' | 'Boolean')
		public Alternatives getTypeAlternatives_0() { return cTypeAlternatives_0; }
		
		//'String'
		public Keyword getTypeStringKeyword_0_0() { return cTypeStringKeyword_0_0; }
		
		//'Real'
		public Keyword getTypeRealKeyword_0_1() { return cTypeRealKeyword_0_1; }
		
		//'Integer'
		public Keyword getTypeIntegerKeyword_0_2() { return cTypeIntegerKeyword_0_2; }
		
		//'Boolean'
		public Keyword getTypeBooleanKeyword_0_3() { return cTypeBooleanKeyword_0_3; }
	}
	public class ClassTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.uma.usex.Usex.ClassType");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cTypeUseClassCrossReference_0 = (CrossReference)cTypeAssignment.eContents().get(0);
		private final RuleCall cTypeUseClassIDTerminalRuleCall_0_1 = (RuleCall)cTypeUseClassCrossReference_0.eContents().get(1);
		
		//ClassType:
		//    type=[UseClass]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type=[UseClass]
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//[UseClass]
		public CrossReference getTypeUseClassCrossReference_0() { return cTypeUseClassCrossReference_0; }
		
		//ID
		public RuleCall getTypeUseClassIDTerminalRuleCall_0_1() { return cTypeUseClassIDTerminalRuleCall_0_1; }
	}
	public class AttributeInitializationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.uma.usex.Usex.AttributeInitialization");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDoubleInitializationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanInitializationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIntegerInitializationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStringInitializationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//AttributeInitialization:
		//    (DoubleInitialization |  BooleanInitialization | IntegerInitialization | StringInitialization)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(DoubleInitialization |  BooleanInitialization | IntegerInitialization | StringInitialization)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DoubleInitialization
		public RuleCall getDoubleInitializationParserRuleCall_0() { return cDoubleInitializationParserRuleCall_0; }
		
		//BooleanInitialization
		public RuleCall getBooleanInitializationParserRuleCall_1() { return cBooleanInitializationParserRuleCall_1; }
		
		//IntegerInitialization
		public RuleCall getIntegerInitializationParserRuleCall_2() { return cIntegerInitializationParserRuleCall_2; }
		
		//StringInitialization
		public RuleCall getStringInitializationParserRuleCall_3() { return cStringInitializationParserRuleCall_3; }
	}
	public class DoubleInitializationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.uma.usex.Usex.DoubleInitialization");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueDOUBLETerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//DoubleInitialization:
		//    value=DOUBLE
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=DOUBLE
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//DOUBLE
		public RuleCall getValueDOUBLETerminalRuleCall_0() { return cValueDOUBLETerminalRuleCall_0; }
	}
	public class BooleanInitializationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.uma.usex.Usex.BooleanInitialization");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueBOOLEANTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//BooleanInitialization:
		//    value=BOOLEAN
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=BOOLEAN
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//BOOLEAN
		public RuleCall getValueBOOLEANTerminalRuleCall_0() { return cValueBOOLEANTerminalRuleCall_0; }
	}
	public class IntegerInitializationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.uma.usex.Usex.IntegerInitialization");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntegerInitialization:
		//    value=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class StringInitializationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.uma.usex.Usex.StringInitialization");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringInitialization:
		//    value=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.uma.usex.Usex.Operation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMethodParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQueryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// --------------------------------- OPERATION & QUERIES ---------------------------------
		//Operation:
		//    Method | Query
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Method | Query
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Method
		public RuleCall getMethodParserRuleCall_0() { return cMethodParserRuleCall_0; }
		
		//Query
		public RuleCall getQueryParserRuleCall_1() { return cQueryParserRuleCall_1; }
	}
	public class MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.uma.usex.Usex.Method");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInputParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInputParametersParameterParserRuleCall_2_0 = (RuleCall)cInputParametersAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cReturnParameterAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cReturnParameterAttributeTypeParserRuleCall_4_1_0 = (RuleCall)cReturnParameterAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cBeginKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cOperationBodyAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cOperationBodyIDTerminalRuleCall_5_1_0 = (RuleCall)cOperationBodyAssignment_5_1.eContents().get(0);
		private final Keyword cEndKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cConditionsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cConditionsConditionParserRuleCall_6_0 = (RuleCall)cConditionsAssignment_6.eContents().get(0);
		
		//Method:
		//    name=ID '(' inputParameters+=(Parameter)* ')' (':' returnParameter=AttributeType)?
		//    ('begin' operationBody=ID 'end')?
		//    conditions+=(Condition)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '(' inputParameters+=(Parameter)* ')' (':' returnParameter=AttributeType)?
		//('begin' operationBody=ID 'end')?
		//conditions+=(Condition)*
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//inputParameters+=(Parameter)*
		public Assignment getInputParametersAssignment_2() { return cInputParametersAssignment_2; }
		
		//(Parameter)
		public RuleCall getInputParametersParameterParserRuleCall_2_0() { return cInputParametersParameterParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//(':' returnParameter=AttributeType)?
		public Group getGroup_4() { return cGroup_4; }
		
		//':'
		public Keyword getColonKeyword_4_0() { return cColonKeyword_4_0; }
		
		//returnParameter=AttributeType
		public Assignment getReturnParameterAssignment_4_1() { return cReturnParameterAssignment_4_1; }
		
		//AttributeType
		public RuleCall getReturnParameterAttributeTypeParserRuleCall_4_1_0() { return cReturnParameterAttributeTypeParserRuleCall_4_1_0; }
		
		//('begin' operationBody=ID 'end')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'begin'
		public Keyword getBeginKeyword_5_0() { return cBeginKeyword_5_0; }
		
		//operationBody=ID
		public Assignment getOperationBodyAssignment_5_1() { return cOperationBodyAssignment_5_1; }
		
		//ID
		public RuleCall getOperationBodyIDTerminalRuleCall_5_1_0() { return cOperationBodyIDTerminalRuleCall_5_1_0; }
		
		//'end'
		public Keyword getEndKeyword_5_2() { return cEndKeyword_5_2; }
		
		//conditions+=(Condition)*
		public Assignment getConditionsAssignment_6() { return cConditionsAssignment_6; }
		
		//(Condition)
		public RuleCall getConditionsConditionParserRuleCall_6_0() { return cConditionsConditionParserRuleCall_6_0; }
	}
	public class QueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.uma.usex.Usex.Query");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInputParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInputParametersParameterParserRuleCall_2_0 = (RuleCall)cInputParametersAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cReturnParameterAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cReturnParameterAttributeTypeParserRuleCall_5_0 = (RuleCall)cReturnParameterAssignment_5.eContents().get(0);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cOperationBodyAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cOperationBodyIDTerminalRuleCall_7_0 = (RuleCall)cOperationBodyAssignment_7.eContents().get(0);
		
		//Query:
		//    name=ID '(' inputParameters+=(Parameter)* ')' ':' returnParameter=AttributeType
		//    '=' operationBody=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '(' inputParameters+=(Parameter)* ')' ':' returnParameter=AttributeType
		//'=' operationBody=ID
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//inputParameters+=(Parameter)*
		public Assignment getInputParametersAssignment_2() { return cInputParametersAssignment_2; }
		
		//(Parameter)
		public RuleCall getInputParametersParameterParserRuleCall_2_0() { return cInputParametersParameterParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//returnParameter=AttributeType
		public Assignment getReturnParameterAssignment_5() { return cReturnParameterAssignment_5; }
		
		//AttributeType
		public RuleCall getReturnParameterAttributeTypeParserRuleCall_5_0() { return cReturnParameterAttributeTypeParserRuleCall_5_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//operationBody=ID
		public Assignment getOperationBodyAssignment_7() { return cOperationBodyAssignment_7; }
		
		//ID
		public RuleCall getOperationBodyIDTerminalRuleCall_7_0() { return cOperationBodyIDTerminalRuleCall_7_0; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.uma.usex.Usex.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeAttributeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Parameter:
		//    name=ID ':' type=AttributeType (',')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' type=AttributeType (',')?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=AttributeType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//AttributeType
		public RuleCall getTypeAttributeTypeParserRuleCall_2_0() { return cTypeAttributeTypeParserRuleCall_2_0; }
		
		//(',')?
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.uma.usex.Usex.Condition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPreconditionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPostconditionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Condition:
		//    Precondition | Postcondition
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Precondition | Postcondition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Precondition
		public RuleCall getPreconditionParserRuleCall_0() { return cPreconditionParserRuleCall_0; }
		
		//Postcondition
		public RuleCall getPostconditionParserRuleCall_1() { return cPostconditionParserRuleCall_1; }
	}
	public class PreconditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.uma.usex.Usex.Precondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPreKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionBodyConditionBodyParserRuleCall_1_0 = (RuleCall)cConditionBodyAssignment_1.eContents().get(0);
		
		//Precondition:
		//    'pre' conditionBody=ConditionBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'pre' conditionBody=ConditionBody
		public Group getGroup() { return cGroup; }
		
		//'pre'
		public Keyword getPreKeyword_0() { return cPreKeyword_0; }
		
		//conditionBody=ConditionBody
		public Assignment getConditionBodyAssignment_1() { return cConditionBodyAssignment_1; }
		
		//ConditionBody
		public RuleCall getConditionBodyConditionBodyParserRuleCall_1_0() { return cConditionBodyConditionBodyParserRuleCall_1_0; }
	}
	public class PostconditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.uma.usex.Usex.Postcondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPostKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionBodyConditionBodyParserRuleCall_1_0 = (RuleCall)cConditionBodyAssignment_1.eContents().get(0);
		
		//Postcondition:
		//    'post' conditionBody=ConditionBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'post' conditionBody=ConditionBody
		public Group getGroup() { return cGroup; }
		
		//'post'
		public Keyword getPostKeyword_0() { return cPostKeyword_0; }
		
		//conditionBody=ConditionBody
		public Assignment getConditionBodyAssignment_1() { return cConditionBodyAssignment_1; }
		
		//ConditionBody
		public RuleCall getConditionBodyConditionBodyParserRuleCall_1_0() { return cConditionBodyConditionBodyParserRuleCall_1_0; }
	}
	public class ConditionBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.uma.usex.Usex.ConditionBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionIDTerminalRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		
		//ConditionBody:
		//    (name=ID)? ':' condition=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(name=ID)? ':' condition=ID
		public Group getGroup() { return cGroup; }
		
		//(name=ID)?
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//condition=ID
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//ID
		public RuleCall getConditionIDTerminalRuleCall_2_0() { return cConditionIDTerminalRuleCall_2_0; }
	}
	public class ConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.uma.usex.Usex.Constraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInvKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionBodyConditionBodyParserRuleCall_1_0 = (RuleCall)cConditionBodyAssignment_1.eContents().get(0);
		
		//// --------------------------------- CONSTRAINTS ---------------------------------
		//Constraint:
		//    'inv' conditionBody=ConditionBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'inv' conditionBody=ConditionBody
		public Group getGroup() { return cGroup; }
		
		//'inv'
		public Keyword getInvKeyword_0() { return cInvKeyword_0; }
		
		//conditionBody=ConditionBody
		public Assignment getConditionBodyAssignment_1() { return cConditionBodyAssignment_1; }
		
		//ConditionBody
		public RuleCall getConditionBodyConditionBodyParserRuleCall_1_0() { return cConditionBodyConditionBodyParserRuleCall_1_0; }
	}
	public class RelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.uma.usex.Usex.Relation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAssociationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCompositionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// --------------------------------- RELATIONS ---------------------------------
		//Relation:
		//    Association | Composition
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Association | Composition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Association
		public RuleCall getAssociationParserRuleCall_0() { return cAssociationParserRuleCall_0; }
		
		//Composition
		public RuleCall getCompositionParserRuleCall_1() { return cCompositionParserRuleCall_1; }
	}
	public class AssociationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.uma.usex.Usex.Association");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssociationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cBetweenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRelationBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRelationBodyRelationBodyParserRuleCall_3_0 = (RuleCall)cRelationBodyAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Association:
		//    'association' name=ID 'between' relationBody=RelationBody 'end'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'association' name=ID 'between' relationBody=RelationBody 'end'
		public Group getGroup() { return cGroup; }
		
		//'association'
		public Keyword getAssociationKeyword_0() { return cAssociationKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'between'
		public Keyword getBetweenKeyword_2() { return cBetweenKeyword_2; }
		
		//relationBody=RelationBody
		public Assignment getRelationBodyAssignment_3() { return cRelationBodyAssignment_3; }
		
		//RelationBody
		public RuleCall getRelationBodyRelationBodyParserRuleCall_3_0() { return cRelationBodyRelationBodyParserRuleCall_3_0; }
		
		//'end'
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}
	public class CompositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.uma.usex.Usex.Composition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCompositionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cBetweenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRelationBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRelationBodyRelationBodyParserRuleCall_3_0 = (RuleCall)cRelationBodyAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Composition:
		//    'composition' name=ID  'between' relationBody=RelationBody 'end'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'composition' name=ID  'between' relationBody=RelationBody 'end'
		public Group getGroup() { return cGroup; }
		
		//'composition'
		public Keyword getCompositionKeyword_0() { return cCompositionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'between'
		public Keyword getBetweenKeyword_2() { return cBetweenKeyword_2; }
		
		//relationBody=RelationBody
		public Assignment getRelationBodyAssignment_3() { return cRelationBodyAssignment_3; }
		
		//RelationBody
		public RuleCall getRelationBodyRelationBodyParserRuleCall_3_0() { return cRelationBodyRelationBodyParserRuleCall_3_0; }
		
		//'end'
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}
	public class RelationBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.uma.usex.Usex.RelationBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOriginClassAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOriginClassRelationMemberParserRuleCall_0_0 = (RuleCall)cOriginClassAssignment_0.eContents().get(0);
		private final Assignment cDestinyClassAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDestinyClassRelationMemberParserRuleCall_1_0 = (RuleCall)cDestinyClassAssignment_1.eContents().get(0);
		
		//RelationBody:
		//    originClass=RelationMember
		//    destinyClass=RelationMember
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//originClass=RelationMember
		//destinyClass=RelationMember
		public Group getGroup() { return cGroup; }
		
		//originClass=RelationMember
		public Assignment getOriginClassAssignment_0() { return cOriginClassAssignment_0; }
		
		//RelationMember
		public RuleCall getOriginClassRelationMemberParserRuleCall_0_0() { return cOriginClassRelationMemberParserRuleCall_0_0; }
		
		//destinyClass=RelationMember
		public Assignment getDestinyClassAssignment_1() { return cDestinyClassAssignment_1; }
		
		//RelationMember
		public RuleCall getDestinyClassRelationMemberParserRuleCall_1_0() { return cDestinyClassRelationMemberParserRuleCall_1_0; }
	}
	public class RelationMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.uma.usex.Usex.RelationMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cClassAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cClassUseClassCrossReference_0_0 = (CrossReference)cClassAssignment_0.eContents().get(0);
		private final RuleCall cClassUseClassIDTerminalRuleCall_0_0_1 = (RuleCall)cClassUseClassCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCardinalityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCardinalityCardinalityTypeParserRuleCall_2_0 = (RuleCall)cCardinalityAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRoleKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRoleNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRoleNameIDTerminalRuleCall_5_0 = (RuleCall)cRoleNameAssignment_5.eContents().get(0);
		
		//RelationMember:
		//    class=[UseClass] '[' cardinality=CardinalityType ']' 'role' roleName=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//class=[UseClass] '[' cardinality=CardinalityType ']' 'role' roleName=ID
		public Group getGroup() { return cGroup; }
		
		//class=[UseClass]
		public Assignment getClassAssignment_0() { return cClassAssignment_0; }
		
		//[UseClass]
		public CrossReference getClassUseClassCrossReference_0_0() { return cClassUseClassCrossReference_0_0; }
		
		//ID
		public RuleCall getClassUseClassIDTerminalRuleCall_0_0_1() { return cClassUseClassIDTerminalRuleCall_0_0_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//cardinality=CardinalityType
		public Assignment getCardinalityAssignment_2() { return cCardinalityAssignment_2; }
		
		//CardinalityType
		public RuleCall getCardinalityCardinalityTypeParserRuleCall_2_0() { return cCardinalityCardinalityTypeParserRuleCall_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
		
		//'role'
		public Keyword getRoleKeyword_4() { return cRoleKeyword_4; }
		
		//roleName=ID
		public Assignment getRoleNameAssignment_5() { return cRoleNameAssignment_5; }
		
		//ID
		public RuleCall getRoleNameIDTerminalRuleCall_5_0() { return cRoleNameIDTerminalRuleCall_5_0; }
	}
	public class CardinalityTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.uma.usex.Usex.CardinalityType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleCardinalityParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDoubleCardinalityParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//CardinalityType:
		//    SimpleCardinality | DoubleCardinality
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleCardinality | DoubleCardinality
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SimpleCardinality
		public RuleCall getSimpleCardinalityParserRuleCall_0() { return cSimpleCardinalityParserRuleCall_0; }
		
		//DoubleCardinality
		public RuleCall getDoubleCardinalityParserRuleCall_1() { return cDoubleCardinalityParserRuleCall_1; }
	}
	public class SimpleCardinalityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.uma.usex.Usex.SimpleCardinality");
		private final Assignment cCardinalityAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCardinalityCardinalityValueParserRuleCall_0 = (RuleCall)cCardinalityAssignment.eContents().get(0);
		
		//SimpleCardinality:
		//    cardinality=CardinalityValue
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//cardinality=CardinalityValue
		public Assignment getCardinalityAssignment() { return cCardinalityAssignment; }
		
		//CardinalityValue
		public RuleCall getCardinalityCardinalityValueParserRuleCall_0() { return cCardinalityCardinalityValueParserRuleCall_0; }
	}
	public class DoubleCardinalityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.uma.usex.Usex.DoubleCardinality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOriginCardinalityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOriginCardinalityCardinalityValueParserRuleCall_0_0 = (RuleCall)cOriginCardinalityAssignment_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDestinyCardinalityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDestinyCardinalityCardinalityValueParserRuleCall_2_0 = (RuleCall)cDestinyCardinalityAssignment_2.eContents().get(0);
		
		//DoubleCardinality:
		//    originCardinality=CardinalityValue '..' destinyCardinality=CardinalityValue
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//originCardinality=CardinalityValue '..' destinyCardinality=CardinalityValue
		public Group getGroup() { return cGroup; }
		
		//originCardinality=CardinalityValue
		public Assignment getOriginCardinalityAssignment_0() { return cOriginCardinalityAssignment_0; }
		
		//CardinalityValue
		public RuleCall getOriginCardinalityCardinalityValueParserRuleCall_0_0() { return cOriginCardinalityCardinalityValueParserRuleCall_0_0; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_1() { return cFullStopFullStopKeyword_1; }
		
		//destinyCardinality=CardinalityValue
		public Assignment getDestinyCardinalityAssignment_2() { return cDestinyCardinalityAssignment_2; }
		
		//CardinalityValue
		public RuleCall getDestinyCardinalityCardinalityValueParserRuleCall_2_0() { return cDestinyCardinalityCardinalityValueParserRuleCall_2_0; }
	}
	public class CardinalityValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.uma.usex.Usex.CardinalityValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntCardinalityParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAsteriskCardinalityParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//CardinalityValue:
		//    IntCardinality | AsteriskCardinality
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//IntCardinality | AsteriskCardinality
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntCardinality
		public RuleCall getIntCardinalityParserRuleCall_0() { return cIntCardinalityParserRuleCall_0; }
		
		//AsteriskCardinality
		public RuleCall getAsteriskCardinalityParserRuleCall_1() { return cAsteriskCardinalityParserRuleCall_1; }
	}
	public class IntCardinalityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.uma.usex.Usex.IntCardinality");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntCardinality:
		//    value=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class AsteriskCardinalityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.uma.usex.Usex.AsteriskCardinality");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueASTERISKTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//AsteriskCardinality:
		//    value=ASTERISK
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=ASTERISK
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//ASTERISK
		public RuleCall getValueASTERISKTerminalRuleCall_0() { return cValueASTERISKTerminalRuleCall_0; }
	}
	
	
	private final ModelElements pModel;
	private final AbstractElementElements pAbstractElement;
	private final UseClassElements pUseClass;
	private final AttributeElements pAttribute;
	private final AttributeTypeElements pAttributeType;
	private final PrimitiveTypeElements pPrimitiveType;
	private final ClassTypeElements pClassType;
	private final AttributeInitializationElements pAttributeInitialization;
	private final DoubleInitializationElements pDoubleInitialization;
	private final BooleanInitializationElements pBooleanInitialization;
	private final IntegerInitializationElements pIntegerInitialization;
	private final StringInitializationElements pStringInitialization;
	private final OperationElements pOperation;
	private final MethodElements pMethod;
	private final QueryElements pQuery;
	private final ParameterElements pParameter;
	private final ConditionElements pCondition;
	private final PreconditionElements pPrecondition;
	private final PostconditionElements pPostcondition;
	private final ConditionBodyElements pConditionBody;
	private final ConstraintElements pConstraint;
	private final RelationElements pRelation;
	private final AssociationElements pAssociation;
	private final CompositionElements pComposition;
	private final RelationBodyElements pRelationBody;
	private final RelationMemberElements pRelationMember;
	private final CardinalityTypeElements pCardinalityType;
	private final SimpleCardinalityElements pSimpleCardinality;
	private final DoubleCardinalityElements pDoubleCardinality;
	private final CardinalityValueElements pCardinalityValue;
	private final IntCardinalityElements pIntCardinality;
	private final AsteriskCardinalityElements pAsteriskCardinality;
	private final TerminalRule tINT;
	private final TerminalRule tDOUBLE;
	private final TerminalRule tBOOLEAN;
	private final TerminalRule tASTERISK;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public UsexGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pAbstractElement = new AbstractElementElements();
		this.pUseClass = new UseClassElements();
		this.pAttribute = new AttributeElements();
		this.pAttributeType = new AttributeTypeElements();
		this.pPrimitiveType = new PrimitiveTypeElements();
		this.pClassType = new ClassTypeElements();
		this.pAttributeInitialization = new AttributeInitializationElements();
		this.pDoubleInitialization = new DoubleInitializationElements();
		this.pBooleanInitialization = new BooleanInitializationElements();
		this.pIntegerInitialization = new IntegerInitializationElements();
		this.pStringInitialization = new StringInitializationElements();
		this.pOperation = new OperationElements();
		this.pMethod = new MethodElements();
		this.pQuery = new QueryElements();
		this.pParameter = new ParameterElements();
		this.pCondition = new ConditionElements();
		this.pPrecondition = new PreconditionElements();
		this.pPostcondition = new PostconditionElements();
		this.pConditionBody = new ConditionBodyElements();
		this.pConstraint = new ConstraintElements();
		this.pRelation = new RelationElements();
		this.pAssociation = new AssociationElements();
		this.pComposition = new CompositionElements();
		this.pRelationBody = new RelationBodyElements();
		this.pRelationMember = new RelationMemberElements();
		this.pCardinalityType = new CardinalityTypeElements();
		this.pSimpleCardinality = new SimpleCardinalityElements();
		this.pDoubleCardinality = new DoubleCardinalityElements();
		this.pCardinalityValue = new CardinalityValueElements();
		this.pIntCardinality = new IntCardinalityElements();
		this.pAsteriskCardinality = new AsteriskCardinalityElements();
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.uma.usex.Usex.INT");
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.uma.usex.Usex.DOUBLE");
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.uma.usex.Usex.BOOLEAN");
		this.tASTERISK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.uma.usex.Usex.ASTERISK");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.uma.usex.Usex".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    'model' name=ID elements+=(AbstractElement)*
	//;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//AbstractElement:
	//    Relation | UseClass
	//;
	public AbstractElementElements getAbstractElementAccess() {
		return pAbstractElement;
	}
	
	public ParserRule getAbstractElementRule() {
		return getAbstractElementAccess().getRule();
	}
	
	//// --------------------------------- CLASSES ---------------------------------
	//UseClass:
	//    'class' name=ID
	//    ('attributes' attributes+=(Attribute)*)?
	//    ('operations' operations+=(Operation)*)?
	//    ('constraints' constraints+=(Constraint)*)?
	//    'end'
	//;
	public UseClassElements getUseClassAccess() {
		return pUseClass;
	}
	
	public ParserRule getUseClassRule() {
		return getUseClassAccess().getRule();
	}
	
	//// --------------------------------- ATTRIBUTES ---------------------------------
	//Attribute:
	//    name=ID ':' type=AttributeType
	//    ('init' ':' initialization=AttributeInitialization)?
	//    ('derived' ':' derivedFrom=ID)?
	//;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//AttributeType:
	//    (PrimitiveType | ClassType)
	//;
	public AttributeTypeElements getAttributeTypeAccess() {
		return pAttributeType;
	}
	
	public ParserRule getAttributeTypeRule() {
		return getAttributeTypeAccess().getRule();
	}
	
	//PrimitiveType:
	//    type=('String' | 'Real' | 'Integer' | 'Boolean')
	//;
	public PrimitiveTypeElements getPrimitiveTypeAccess() {
		return pPrimitiveType;
	}
	
	public ParserRule getPrimitiveTypeRule() {
		return getPrimitiveTypeAccess().getRule();
	}
	
	//ClassType:
	//    type=[UseClass]
	//;
	public ClassTypeElements getClassTypeAccess() {
		return pClassType;
	}
	
	public ParserRule getClassTypeRule() {
		return getClassTypeAccess().getRule();
	}
	
	//AttributeInitialization:
	//    (DoubleInitialization |  BooleanInitialization | IntegerInitialization | StringInitialization)
	//;
	public AttributeInitializationElements getAttributeInitializationAccess() {
		return pAttributeInitialization;
	}
	
	public ParserRule getAttributeInitializationRule() {
		return getAttributeInitializationAccess().getRule();
	}
	
	//DoubleInitialization:
	//    value=DOUBLE
	//;
	public DoubleInitializationElements getDoubleInitializationAccess() {
		return pDoubleInitialization;
	}
	
	public ParserRule getDoubleInitializationRule() {
		return getDoubleInitializationAccess().getRule();
	}
	
	//BooleanInitialization:
	//    value=BOOLEAN
	//;
	public BooleanInitializationElements getBooleanInitializationAccess() {
		return pBooleanInitialization;
	}
	
	public ParserRule getBooleanInitializationRule() {
		return getBooleanInitializationAccess().getRule();
	}
	
	//IntegerInitialization:
	//    value=INT
	//;
	public IntegerInitializationElements getIntegerInitializationAccess() {
		return pIntegerInitialization;
	}
	
	public ParserRule getIntegerInitializationRule() {
		return getIntegerInitializationAccess().getRule();
	}
	
	//StringInitialization:
	//    value=STRING
	//;
	public StringInitializationElements getStringInitializationAccess() {
		return pStringInitialization;
	}
	
	public ParserRule getStringInitializationRule() {
		return getStringInitializationAccess().getRule();
	}
	
	//// --------------------------------- OPERATION & QUERIES ---------------------------------
	//Operation:
	//    Method | Query
	//;
	public OperationElements getOperationAccess() {
		return pOperation;
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}
	
	//Method:
	//    name=ID '(' inputParameters+=(Parameter)* ')' (':' returnParameter=AttributeType)?
	//    ('begin' operationBody=ID 'end')?
	//    conditions+=(Condition)*
	//;
	public MethodElements getMethodAccess() {
		return pMethod;
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}
	
	//Query:
	//    name=ID '(' inputParameters+=(Parameter)* ')' ':' returnParameter=AttributeType
	//    '=' operationBody=ID
	//;
	public QueryElements getQueryAccess() {
		return pQuery;
	}
	
	public ParserRule getQueryRule() {
		return getQueryAccess().getRule();
	}
	
	//Parameter:
	//    name=ID ':' type=AttributeType (',')?
	//;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//Condition:
	//    Precondition | Postcondition
	//;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//Precondition:
	//    'pre' conditionBody=ConditionBody
	//;
	public PreconditionElements getPreconditionAccess() {
		return pPrecondition;
	}
	
	public ParserRule getPreconditionRule() {
		return getPreconditionAccess().getRule();
	}
	
	//Postcondition:
	//    'post' conditionBody=ConditionBody
	//;
	public PostconditionElements getPostconditionAccess() {
		return pPostcondition;
	}
	
	public ParserRule getPostconditionRule() {
		return getPostconditionAccess().getRule();
	}
	
	//ConditionBody:
	//    (name=ID)? ':' condition=ID
	//;
	public ConditionBodyElements getConditionBodyAccess() {
		return pConditionBody;
	}
	
	public ParserRule getConditionBodyRule() {
		return getConditionBodyAccess().getRule();
	}
	
	//// --------------------------------- CONSTRAINTS ---------------------------------
	//Constraint:
	//    'inv' conditionBody=ConditionBody
	//;
	public ConstraintElements getConstraintAccess() {
		return pConstraint;
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}
	
	//// --------------------------------- RELATIONS ---------------------------------
	//Relation:
	//    Association | Composition
	//;
	public RelationElements getRelationAccess() {
		return pRelation;
	}
	
	public ParserRule getRelationRule() {
		return getRelationAccess().getRule();
	}
	
	//Association:
	//    'association' name=ID 'between' relationBody=RelationBody 'end'
	//;
	public AssociationElements getAssociationAccess() {
		return pAssociation;
	}
	
	public ParserRule getAssociationRule() {
		return getAssociationAccess().getRule();
	}
	
	//Composition:
	//    'composition' name=ID  'between' relationBody=RelationBody 'end'
	//;
	public CompositionElements getCompositionAccess() {
		return pComposition;
	}
	
	public ParserRule getCompositionRule() {
		return getCompositionAccess().getRule();
	}
	
	//RelationBody:
	//    originClass=RelationMember
	//    destinyClass=RelationMember
	//;
	public RelationBodyElements getRelationBodyAccess() {
		return pRelationBody;
	}
	
	public ParserRule getRelationBodyRule() {
		return getRelationBodyAccess().getRule();
	}
	
	//RelationMember:
	//    class=[UseClass] '[' cardinality=CardinalityType ']' 'role' roleName=ID
	//;
	public RelationMemberElements getRelationMemberAccess() {
		return pRelationMember;
	}
	
	public ParserRule getRelationMemberRule() {
		return getRelationMemberAccess().getRule();
	}
	
	//CardinalityType:
	//    SimpleCardinality | DoubleCardinality
	//;
	public CardinalityTypeElements getCardinalityTypeAccess() {
		return pCardinalityType;
	}
	
	public ParserRule getCardinalityTypeRule() {
		return getCardinalityTypeAccess().getRule();
	}
	
	//SimpleCardinality:
	//    cardinality=CardinalityValue
	//;
	public SimpleCardinalityElements getSimpleCardinalityAccess() {
		return pSimpleCardinality;
	}
	
	public ParserRule getSimpleCardinalityRule() {
		return getSimpleCardinalityAccess().getRule();
	}
	
	//DoubleCardinality:
	//    originCardinality=CardinalityValue '..' destinyCardinality=CardinalityValue
	//;
	public DoubleCardinalityElements getDoubleCardinalityAccess() {
		return pDoubleCardinality;
	}
	
	public ParserRule getDoubleCardinalityRule() {
		return getDoubleCardinalityAccess().getRule();
	}
	
	//CardinalityValue:
	//    IntCardinality | AsteriskCardinality
	//;
	public CardinalityValueElements getCardinalityValueAccess() {
		return pCardinalityValue;
	}
	
	public ParserRule getCardinalityValueRule() {
		return getCardinalityValueAccess().getRule();
	}
	
	//IntCardinality:
	//    value=INT
	//;
	public IntCardinalityElements getIntCardinalityAccess() {
		return pIntCardinality;
	}
	
	public ParserRule getIntCardinalityRule() {
		return getIntCardinalityAccess().getRule();
	}
	
	//AsteriskCardinality:
	//    value=ASTERISK
	//;
	public AsteriskCardinalityElements getAsteriskCardinalityAccess() {
		return pAsteriskCardinality;
	}
	
	public ParserRule getAsteriskCardinalityRule() {
		return getAsteriskCardinalityAccess().getRule();
	}
	
	//// --------------------------------- TERMINAL RULES ---------------------------------
	//@Override
	//terminal INT returns ecore::EInt: ('-')? ('0'..'9')+;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//terminal DOUBLE:
	//    ('-')? INT '.' INT
	//;
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	}
	
	//terminal BOOLEAN:
	//    ('true' | 'false')
	//;
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	}
	
	//terminal ASTERISK:
	//    '*'
	//;
	public TerminalRule getASTERISKRule() {
		return tASTERISK;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
