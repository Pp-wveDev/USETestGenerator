/*
 * generated by Xtext 2.25.0
 */
package org.xtext.uma.usex.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.uma.usex.ide.contentassist.antlr.internal.InternalUsexParser;
import org.xtext.uma.usex.services.UsexGrammarAccess;

public class UsexParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(UsexGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, UsexGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getAbstractElementAccess().getAlternatives(), "rule__AbstractElement__Alternatives");
			builder.put(grammarAccess.getAttributeTypeAccess().getAlternatives(), "rule__AttributeType__Alternatives");
			builder.put(grammarAccess.getPrimitiveTypeAccess().getTypeAlternatives_0(), "rule__PrimitiveType__TypeAlternatives_0");
			builder.put(grammarAccess.getAttributeInitializationAccess().getAlternatives(), "rule__AttributeInitialization__Alternatives");
			builder.put(grammarAccess.getOperationAccess().getAlternatives(), "rule__Operation__Alternatives");
			builder.put(grammarAccess.getConditionAccess().getAlternatives(), "rule__Condition__Alternatives");
			builder.put(grammarAccess.getRelationAccess().getAlternatives(), "rule__Relation__Alternatives");
			builder.put(grammarAccess.getCardinalityTypeAccess().getAlternatives(), "rule__CardinalityType__Alternatives");
			builder.put(grammarAccess.getCardinalityValueAccess().getAlternatives(), "rule__CardinalityValue__Alternatives");
			builder.put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
			builder.put(grammarAccess.getUseClassAccess().getGroup(), "rule__UseClass__Group__0");
			builder.put(grammarAccess.getUseClassAccess().getGroup_2(), "rule__UseClass__Group_2__0");
			builder.put(grammarAccess.getUseClassAccess().getGroup_3(), "rule__UseClass__Group_3__0");
			builder.put(grammarAccess.getUseClassAccess().getGroup_4(), "rule__UseClass__Group_4__0");
			builder.put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
			builder.put(grammarAccess.getAttributeAccess().getGroup_3(), "rule__Attribute__Group_3__0");
			builder.put(grammarAccess.getAttributeAccess().getGroup_4(), "rule__Attribute__Group_4__0");
			builder.put(grammarAccess.getMethodAccess().getGroup(), "rule__Method__Group__0");
			builder.put(grammarAccess.getMethodAccess().getGroup_4(), "rule__Method__Group_4__0");
			builder.put(grammarAccess.getMethodAccess().getGroup_5(), "rule__Method__Group_5__0");
			builder.put(grammarAccess.getQueryAccess().getGroup(), "rule__Query__Group__0");
			builder.put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
			builder.put(grammarAccess.getPreconditionAccess().getGroup(), "rule__Precondition__Group__0");
			builder.put(grammarAccess.getPostconditionAccess().getGroup(), "rule__Postcondition__Group__0");
			builder.put(grammarAccess.getConditionBodyAccess().getGroup(), "rule__ConditionBody__Group__0");
			builder.put(grammarAccess.getConstraintAccess().getGroup(), "rule__Constraint__Group__0");
			builder.put(grammarAccess.getAssociationAccess().getGroup(), "rule__Association__Group__0");
			builder.put(grammarAccess.getCompositionAccess().getGroup(), "rule__Composition__Group__0");
			builder.put(grammarAccess.getRelationBodyAccess().getGroup(), "rule__RelationBody__Group__0");
			builder.put(grammarAccess.getRelationMemberAccess().getGroup(), "rule__RelationMember__Group__0");
			builder.put(grammarAccess.getDoubleCardinalityAccess().getGroup(), "rule__DoubleCardinality__Group__0");
			builder.put(grammarAccess.getModelAccess().getNameAssignment_1(), "rule__Model__NameAssignment_1");
			builder.put(grammarAccess.getModelAccess().getElementsAssignment_2(), "rule__Model__ElementsAssignment_2");
			builder.put(grammarAccess.getUseClassAccess().getNameAssignment_1(), "rule__UseClass__NameAssignment_1");
			builder.put(grammarAccess.getUseClassAccess().getAttributesAssignment_2_1(), "rule__UseClass__AttributesAssignment_2_1");
			builder.put(grammarAccess.getUseClassAccess().getOperationsAssignment_3_1(), "rule__UseClass__OperationsAssignment_3_1");
			builder.put(grammarAccess.getUseClassAccess().getConstraintsAssignment_4_1(), "rule__UseClass__ConstraintsAssignment_4_1");
			builder.put(grammarAccess.getAttributeAccess().getNameAssignment_0(), "rule__Attribute__NameAssignment_0");
			builder.put(grammarAccess.getAttributeAccess().getTypeAssignment_2(), "rule__Attribute__TypeAssignment_2");
			builder.put(grammarAccess.getAttributeAccess().getInitializationAssignment_3_2(), "rule__Attribute__InitializationAssignment_3_2");
			builder.put(grammarAccess.getAttributeAccess().getDerivedFromAssignment_4_2(), "rule__Attribute__DerivedFromAssignment_4_2");
			builder.put(grammarAccess.getPrimitiveTypeAccess().getTypeAssignment(), "rule__PrimitiveType__TypeAssignment");
			builder.put(grammarAccess.getClassTypeAccess().getTypeAssignment(), "rule__ClassType__TypeAssignment");
			builder.put(grammarAccess.getDoubleInitializationAccess().getValueAssignment(), "rule__DoubleInitialization__ValueAssignment");
			builder.put(grammarAccess.getBooleanInitializationAccess().getValueAssignment(), "rule__BooleanInitialization__ValueAssignment");
			builder.put(grammarAccess.getIntegerInitializationAccess().getValueAssignment(), "rule__IntegerInitialization__ValueAssignment");
			builder.put(grammarAccess.getStringInitializationAccess().getValueAssignment(), "rule__StringInitialization__ValueAssignment");
			builder.put(grammarAccess.getMethodAccess().getNameAssignment_0(), "rule__Method__NameAssignment_0");
			builder.put(grammarAccess.getMethodAccess().getInputParametersAssignment_2(), "rule__Method__InputParametersAssignment_2");
			builder.put(grammarAccess.getMethodAccess().getReturnParameterAssignment_4_1(), "rule__Method__ReturnParameterAssignment_4_1");
			builder.put(grammarAccess.getMethodAccess().getOperationBodyAssignment_5_1(), "rule__Method__OperationBodyAssignment_5_1");
			builder.put(grammarAccess.getMethodAccess().getConditionsAssignment_6(), "rule__Method__ConditionsAssignment_6");
			builder.put(grammarAccess.getQueryAccess().getNameAssignment_0(), "rule__Query__NameAssignment_0");
			builder.put(grammarAccess.getQueryAccess().getInputParametersAssignment_2(), "rule__Query__InputParametersAssignment_2");
			builder.put(grammarAccess.getQueryAccess().getReturnParameterAssignment_5(), "rule__Query__ReturnParameterAssignment_5");
			builder.put(grammarAccess.getQueryAccess().getOperationBodyAssignment_7(), "rule__Query__OperationBodyAssignment_7");
			builder.put(grammarAccess.getParameterAccess().getNameAssignment_0(), "rule__Parameter__NameAssignment_0");
			builder.put(grammarAccess.getParameterAccess().getTypeAssignment_2(), "rule__Parameter__TypeAssignment_2");
			builder.put(grammarAccess.getPreconditionAccess().getConditionBodyAssignment_1(), "rule__Precondition__ConditionBodyAssignment_1");
			builder.put(grammarAccess.getPostconditionAccess().getConditionBodyAssignment_1(), "rule__Postcondition__ConditionBodyAssignment_1");
			builder.put(grammarAccess.getConditionBodyAccess().getNameAssignment_0(), "rule__ConditionBody__NameAssignment_0");
			builder.put(grammarAccess.getConditionBodyAccess().getConditionAssignment_2(), "rule__ConditionBody__ConditionAssignment_2");
			builder.put(grammarAccess.getConstraintAccess().getConditionBodyAssignment_1(), "rule__Constraint__ConditionBodyAssignment_1");
			builder.put(grammarAccess.getAssociationAccess().getNameAssignment_1(), "rule__Association__NameAssignment_1");
			builder.put(grammarAccess.getAssociationAccess().getRelationBodyAssignment_3(), "rule__Association__RelationBodyAssignment_3");
			builder.put(grammarAccess.getCompositionAccess().getNameAssignment_1(), "rule__Composition__NameAssignment_1");
			builder.put(grammarAccess.getCompositionAccess().getRelationBodyAssignment_3(), "rule__Composition__RelationBodyAssignment_3");
			builder.put(grammarAccess.getRelationBodyAccess().getOriginClassAssignment_0(), "rule__RelationBody__OriginClassAssignment_0");
			builder.put(grammarAccess.getRelationBodyAccess().getDestinyClassAssignment_1(), "rule__RelationBody__DestinyClassAssignment_1");
			builder.put(grammarAccess.getRelationMemberAccess().getClassAssignment_0(), "rule__RelationMember__ClassAssignment_0");
			builder.put(grammarAccess.getRelationMemberAccess().getCardinalityAssignment_2(), "rule__RelationMember__CardinalityAssignment_2");
			builder.put(grammarAccess.getRelationMemberAccess().getRoleNameAssignment_5(), "rule__RelationMember__RoleNameAssignment_5");
			builder.put(grammarAccess.getSimpleCardinalityAccess().getCardinalityAssignment(), "rule__SimpleCardinality__CardinalityAssignment");
			builder.put(grammarAccess.getDoubleCardinalityAccess().getOriginCardinalityAssignment_0(), "rule__DoubleCardinality__OriginCardinalityAssignment_0");
			builder.put(grammarAccess.getDoubleCardinalityAccess().getDestinyCardinalityAssignment_2(), "rule__DoubleCardinality__DestinyCardinalityAssignment_2");
			builder.put(grammarAccess.getIntCardinalityAccess().getValueAssignment(), "rule__IntCardinality__ValueAssignment");
			builder.put(grammarAccess.getAsteriskCardinalityAccess().getValueAssignment(), "rule__AsteriskCardinality__ValueAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private UsexGrammarAccess grammarAccess;

	@Override
	protected InternalUsexParser createParser() {
		InternalUsexParser result = new InternalUsexParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public UsexGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(UsexGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
