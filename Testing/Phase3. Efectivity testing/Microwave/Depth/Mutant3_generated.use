model Microwave

class Microwave
	attributes
	timer : Integer
		init: 0
	power : Integer
		init: 0
	doorOpen : Boolean
		init: false
	cooking : Boolean
		init: false
	withItem : Boolean
		init: false
	operations
	tick() 
	begin
		if (self.timer > 0) then
		self.timer := self.timer - 1;
		end;
	end
	pre cooking:
		self.cooking
	post _post_inv_correctPower:
		self.power >= 0 and self.power <= 4
	post _post_inv_timerPositiveOr0:
		self.timer >= 0
	
	power_inc() 
	begin
		self.power := self.power + 1;
	end
	pre notCooking:
		not self.cooking
	pre incPossible:
		self.power + 1 <= 4
	post powerChanged:
		not self.cooking implies (self.power < 4 implies self.power@pre + 1 = self.power)
	post _post_inv_correctPower:
		self.power >= 0 and self.power <= 4
	post _post_inv_timerPositiveOr0:
		self.timer >= 0
	
	power_dec() 
	begin
		self.power := self.power - 1;
	end
	pre decPossible:
		self.power - 1 >= 0
	pre notCooking:
		not self.cooking
	post _post_inv_correctPower:
		self.power >= 0 and self.power <= 4
	post _post_inv_timerPositiveOr0:
		self.timer >= 0
	
	power_reset() 
	begin
		self.power := 0;
	end
	pre notCooking:
		not self.cooking
	post _post_inv_correctPower:
		self.power >= 0 and self.power <= 4
	post _post_inv_timerPositiveOr0:
		self.timer >= 0
	
	timer_inc() 
	begin
		self.timer := self.timer + 1;
	end
	pre notCooking:
		not self.cooking
	post _post_inv_correctPower:
		self.power >= 0 and self.power <= 4
	post _post_inv_timerPositiveOr0:
		self.timer >= 0
	
	timer_dec() 
	begin
		self.timer := self.timer - 1;
	end
	pre notCooking:
		not self.cooking
	pre decPossible:
		self.timer - 1 >= 0
	post timerOk:
		self.timer >= 0
	post _post_inv_correctPower:
		self.power >= 0 and self.power <= 4
	post _post_inv_timerPositiveOr0:
		self.timer >= 0
	
	timer_reset() 
	begin
		self.timer := 0;
	end
	pre notCooking:
		not self.cooking
	post timer0:
		self.timer = 0
	post _post_inv_correctPower:
		self.power >= 0 and self.power <= 4
	post _post_inv_timerPositiveOr0:
		self.timer >= 0
	
	cooking_start() 
	begin
		self.cooking := true;
	end
	pre doorClosed:
		not self.doorOpen
	post cooking:
		self.cooking
	post _post_inv_correctPower:
		self.power >= 0 and self.power <= 4
	post _post_inv_timerPositiveOr0:
		self.timer >= 0
	
	cooking_stop() 
	begin
		self.cooking := false;
	end
	post notCooking:
		not self.cooking
	post _post_inv_correctPower:
		self.power >= 0 and self.power <= 4
	post _post_inv_timerPositiveOr0:
		self.timer >= 0
	
	door_opened() 
	begin
		self.doorOpen := true;
	end
	pre notHeating:
		not self.heating.heatingOn
	pre notCooking:
		not self.cooking
	post _post_inv_correctPower:
		self.power >= 0 and self.power <= 4
	post _post_inv_timerPositiveOr0:
		self.timer >= 0
	
	door_closed() 
	begin
		self.doorOpen := false;
	end
	post doorClosed:
		not self.doorOpen
	post _post_inv_correctPower:
		self.power >= 0 and self.power <= 4
	post _post_inv_timerPositiveOr0:
		self.timer >= 0
	
	item_placed() 
	begin
		-- MUTATION
		self.withItem := false;
	end
	pre doorOpened:
		self.doorOpen
	post itemPlaced:
		self.withItem
	post _post_inv_correctPower:
		self.power >= 0 and self.power <= 4
	post _post_inv_timerPositiveOr0:
		self.timer >= 0
	
	item_removed() 
	begin
		self.withItem := false;
	end
	pre doorOpened:
		self.doorOpen
	post withoutItem:
		not self.withItem
	post _post_inv_correctPower:
		self.power >= 0 and self.power <= 4
	post _post_inv_timerPositiveOr0:
		self.timer >= 0
	
	_timer_dec_notCooking() : Boolean
		= not self.cooking
	
	_power_reset_notCooking() : Boolean
		= not self.cooking
	
	_timer_reset_notCooking() : Boolean
		= not self.cooking
	
	_cooking_start_doorClosed() : Boolean
		= not self.doorOpen
	
	_door_opened_notCooking() : Boolean
		= not self.cooking
	
	_door_opened_notHeating() : Boolean
		= not self.heating.heatingOn
	
	_item_removed_doorOpened() : Boolean
		= self.doorOpen
	
	_timer_inc_notCooking() : Boolean
		= not self.cooking
	
	_power_dec_decPossible() : Boolean
		= self.power - 1 >= 0
	
	_timer_dec_decPossible() : Boolean
		= self.timer - 1 >= 0
	
	_power_inc_notCooking() : Boolean
		= not self.cooking
	
	_power_inc_incPossible() : Boolean
		= self.power + 1 <= 4
	
	_item_placed_doorOpened() : Boolean
		= self.doorOpen
	
	_tick_cooking() : Boolean
		= self.cooking
	
	_power_dec_notCooking() : Boolean
		= not self.cooking
	
	_inv_correctPower() : Boolean
		= self.power >= 0 and self.power <= 4
	
	_inv_timerPositiveOr0() : Boolean
		= self.timer >= 0
	
	_check_cooking_start() : Boolean
		= self._cooking_start_doorClosed() and
		self._inv_correctPower() and
		self._inv_timerPositiveOr0()
	
	_check_item_removed() : Boolean
		= self._item_removed_doorOpened() and
		self._inv_correctPower() and
		self._inv_timerPositiveOr0()
	
	_check_door_opened() : Boolean
		= self._door_opened_notCooking() and
		self._door_opened_notHeating() and
		self._inv_correctPower() and
		self._inv_timerPositiveOr0()
	
	_check_power_dec() : Boolean
		= self._power_dec_decPossible() and
		self._power_dec_notCooking() and
		self._inv_correctPower() and
		self._inv_timerPositiveOr0()
	
	_check_power_inc() : Boolean
		= self._power_inc_notCooking() and
		self._power_inc_incPossible() and
		self._inv_correctPower() and
		self._inv_timerPositiveOr0()
	
	_check_item_placed() : Boolean
		= self._item_placed_doorOpened() and
		self._inv_correctPower() and
		self._inv_timerPositiveOr0()
	
	_check_timer_reset() : Boolean
		= self._timer_reset_notCooking() and
		self._inv_correctPower() and
		self._inv_timerPositiveOr0()
	
	_check_cooking_stop() : Boolean
		= self._inv_correctPower() and
		self._inv_timerPositiveOr0()
	
	_check_tick() : Boolean
		= self._tick_cooking() and
		self._inv_correctPower() and
		self._inv_timerPositiveOr0()
	
	_check_door_closed() : Boolean
		= self._inv_correctPower() and
		self._inv_timerPositiveOr0()
	
	_check_timer_inc() : Boolean
		= self._timer_inc_notCooking() and
		self._inv_correctPower() and
		self._inv_timerPositiveOr0()
	
	_check_timer_dec() : Boolean
		= self._timer_dec_notCooking() and
		self._timer_dec_decPossible() and
		self._inv_correctPower() and
		self._inv_timerPositiveOr0()
	
	_check_power_reset() : Boolean
		= self._power_reset_notCooking() and
		self._inv_correctPower() and
		self._inv_timerPositiveOr0()
	
	constraints
	inv correctPower:
		self.power >= 0 and self.power <= 4
	inv timerPositiveOr0:
		self.timer >= 0
end

class Display
	attributes
	text_displayed : String
	operations
	display_clear() 
	begin
		self.text_displayed := '';
	end
	
	display_set(s : String) 
	begin
		self.text_displayed := s;
	end
	
	_check_display_set() : Boolean
		= true
	
	_check_display_clear() : Boolean
		= true
	
end

class Lamp
	attributes
	lampOn : Boolean
		init: false
	operations
	lamp_on() 
	begin
		self.lampOn := true;
	end
	post lampOn:
		self.lampOn
	
	lamp_off() 
	begin
		self.lampOn := false;
	end
	post lampOff:
		not self.lampOn
	
	_check_lamp_on() : Boolean
		= true
	
	_check_lamp_off() : Boolean
		= true
	
end

class Heating
	attributes
	heatingOn : Boolean
		init: false
	operations
	heating_on() 
	begin
		self.heatingOn := true;
	end
	pre cooking:
		self.microwave.cooking
	pre doorClosed:
		not self.microwave.doorOpen
	pre timeSet:
		self.microwave.timer > 0
	post heatingOn:
		self.heatingOn
	
	heating_off() 
	begin
		self.heatingOn := false;
	end
	post heatingOff:
		not self.heatingOn
	
	_heating_on_cooking() : Boolean
		= self.microwave.cooking
	
	_heating_on_doorClosed() : Boolean
		= not self.microwave.doorOpen
	
	_heating_on_timeSet() : Boolean
		= self.microwave.timer > 0
	
	_check_heating_on() : Boolean
		= self._heating_on_cooking() and
		self._heating_on_doorClosed() and
		self._heating_on_timeSet()
	
	_check_heating_off() : Boolean
		= true
	
end

class Beeper
	attributes
	beepOn : Boolean
		init: false
end

class Turnable
	attributes
	turnableOn : Boolean
		init: false
	operations
	turnable_start() 
	begin
		self.turnableOn := true;
	end
	pre doorClosed:
		not self.microwave.doorOpen
	pre heating:
		self.microwave.heating.heatingOn
	post turnableOn:
		self.turnableOn
	
	turnable_stop() 
	begin
		self.turnableOn := false;
	end
	pre doorClosed:
		not self.microwave.heating.heatingOn
	post turnableOff:
		not self.turnableOn
	
	_turnable_start_heating() : Boolean
		= self.microwave.heating.heatingOn
	
	_turnable_stop_doorClosed() : Boolean
		= not self.microwave.heating.heatingOn
	
	_turnable_start_doorClosed() : Boolean
		= not self.microwave.doorOpen
	
	_check_turnable_stop() : Boolean
		= self._turnable_stop_doorClosed()
	
	_check_turnable_start() : Boolean
		= self._turnable_start_heating() and
		self._turnable_start_doorClosed()
	
end

class _test
	operations
	test(n : Integer) 
	begin
		
			declare opIndex : Integer,
				target: Microwave,
				success : Boolean;
					
			opIndex := 13.rand().floor()+1;
		
			for i in Sequence{1..n} do
				for target in Microwave.allInstances() do
					success := false;
					
					if opIndex = 1
						and target._check_tick()
					then
						target.tick();
						success := true;
					end;
					
					if opIndex = 2
						and target._check_power_inc()
					then
						target.power_inc();
						success := true;
					end;
					
					if opIndex = 3
						and target._check_power_dec()
					then
						target.power_dec();
						success := true;
					end;
					
					if opIndex = 4
						and target._check_power_reset()
					then
						target.power_reset();
						success := true;
					end;
					
					if opIndex = 5
						and target._check_timer_inc()
					then
						target.timer_inc();
						success := true;
					end;
					
					if opIndex = 6
						and target._check_timer_dec()
					then
						target.timer_dec();
						success := true;
					end;
					
					if opIndex = 7
						and target._check_timer_reset()
					then
						target.timer_reset();
						success := true;
					end;
					
					if opIndex = 8
						and target._check_cooking_start()
					then
						target.cooking_start();
						success := true;
					end;
					
					if opIndex = 9
						and target._check_cooking_stop()
					then
						target.cooking_stop();
						success := true;
					end;
					
					if opIndex = 10
						and target._check_door_opened()
					then
						target.door_opened();
						success := true;
					end;
					
					if opIndex = 11
						and target._check_door_closed()
					then
						target.door_closed();
						success := true;
					end;
					
					if opIndex = 12
						and target._check_item_placed()
					then
						target.item_placed();
						success := true;
					end;
					
					if opIndex = 13
						and target._check_item_removed()
					then
						target.item_removed();
						success := true;
					end;
					
					
					if not success then
						if opIndex+1 = 13 then
							opIndex := 1;
					else
						opIndex := opIndex + 1;
					end;
					end;
				end;
			end;
	end
	
end

composition DisplayConnection between
	Microwave [1]  role microwave 
	Display [1]  role display 
end

composition LampConnection between
	Microwave [1]  role microwave 
	Lamp [1]  role lam 
end

composition HeatingConnection between
	Microwave [1]  role microwave 
	Heating [1]  role heating 
end

composition BeeperConnection between
	Microwave [1]  role microwave 
	Beeper [1]  role beeper 
end

composition TurnableConnection between
	Microwave [1]  role microwave 
	Turnable [1]  role turnable 
end


