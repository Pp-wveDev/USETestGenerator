-- v1. Input methods have pre and post conditions

model Microwave

-- Main class
class Microwave
    attributes
        -- Timer
        timer : Integer init: 0
        
        -- Power (0-4)
        power : Integer init: 0
        
        -- Door
        doorOpen : Boolean init: false

        -- Cooking
        cooking : Boolean init: false
        
        -- Weight sensor
        withItem : Boolean init: false
    operations
        -- Clock
        tick()
        begin
            if (self.timer > 0) then
                self.timer := self.timer - 1;
            end;
        end
        pre cooking: self.cooking
        
        -- Power
        power_inc()
        begin 
            self.power := self.power + 1;
        end
        pre notCooking: not self.cooking
        pre incPossible: self.power + 1 <= 4
        post powerChanged: not self.cooking implies (self.power < 4 implies self.power@pre+1 = self.power) 

        power_dec()
        begin
                self.power := self.power - 1;
        end
        pre decPossible: self.power - 1 >= 0
        pre notCooking: not self.cooking

        power_reset()
        begin
            self.power := 0;
        end
        pre notCooking: not self.cooking

        -- Timer
        timer_inc()
        begin
            self.timer := self.timer + 1;
        end
        pre notCooking: not self.cooking

        timer_dec()
        begin
            self.timer := self.timer - 1;
        end
        pre notCooking: not self.cooking
        pre decPossible: self.timer - 1 >= 0
        post timerOk: self.timer >= 0

        timer_reset()
        begin
            self.timer := 0;
        end
        pre  notCooking: not self.cooking
        post timer0: self.timer = 0
        

        -- Cooking
        cooking_start()
        begin
            self.cooking := true;
        end
        pre doorClosed: not self.doorOpen
        post cooking: self.cooking

        cooking_stop()
        begin
            self.cooking := false;
        end
        post notCooking: not self.cooking

        -- Door
        door_opened()
        begin
            self.doorOpen := true;
        end
        pre notHeating: not self.heating.heatingOn
        pre notCooking: not self.cooking

        door_closed()
        begin
            self.doorOpen := false;
        end
        post doorClosed: not self.doorOpen

        -- Weight sensor
        item_placed()
        begin
            -- MUTATION
            self.withItem := false;
        end
        pre doorOpened: self.doorOpen
        post itemPlaced: self.withItem

        item_removed()
        begin
            self.withItem := false;
        end
        pre doorOpened: self.doorOpen
        post withoutItem: not self.withItem

        constraints
        inv correctPower:
            self.power >= 0 and self.power <= 4

        inv timerPositiveOr0:
            self.timer >= 0
end

class Display
    attributes
        text_displayed : String

    operations
        display_clear()
        begin
            self.text_displayed := '';
        end

        display_set(s : String)
        begin
            self.text_displayed := s;
        end
end

composition DisplayConnection between
    Microwave[1] role microwave
    Display[1] role display
end

class Lamp
    attributes
        lampOn : Boolean init: false

    operations
        lamp_on()
        begin
            self.lampOn := true;
        end
        post lampOn: self.lampOn

        lamp_off()
        begin
            self.lampOn := false;
        end
        post lampOff: not self.lampOn
end

composition LampConnection between
    Microwave[1] role microwave
    Lamp[1] role lam
end

class Heating
    attributes
        heatingOn : Boolean init: false

    operations
        heating_on()
        begin
            self.heatingOn := true;
        end
        pre cooking: self.microwave.cooking
        pre doorClosed: not self.microwave.doorOpen
        pre timeSet: self.microwave.timer > 0
        post heatingOn: self.heatingOn

        heating_off()
        begin
            self.heatingOn := false;
        end
        post heatingOff: not self.heatingOn
end

composition HeatingConnection between
    Microwave[1] role microwave
    Heating[1] role heating
end

class Beeper
    attributes
        beepOn : Boolean init: false

    operations
        --beep(d: Integer)
end

composition BeeperConnection between
    Microwave[1] role microwave
    Beeper[1] role beeper
end

class Turnable
    attributes
        turnableOn : Boolean init: false

    operations
        turnable_start()
        begin
            self.turnableOn := true;
        end
        pre doorClosed: not self.microwave.doorOpen
        pre heating: self.microwave.heating.heatingOn
        post turnableOn: self.turnableOn

        turnable_stop()
        begin
            self.turnableOn := false;
        end
        pre doorClosed: not self.microwave.heating.heatingOn
        post turnableOff: not self.turnableOn
end

composition TurnableConnection between
    Microwave[1] role microwave
    Turnable[1] role turnable
end