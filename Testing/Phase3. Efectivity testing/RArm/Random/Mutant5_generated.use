model RArm

class Configuration
	attributes
	maxX : Integer
		init: 10
	maxY : Integer
		init: 10
	maxZ : Integer
		init: 10
	minX : Integer
		init: - 10
	minY : Integer
		init: - 10
	minZ : Integer
		init: - 10
end

class Item
	attributes
	posX : Integer
		init: 1
	posY : Integer
		init: 1
	posZ : Integer
		init: 1
	grabbed : Boolean
		derived: not self.arm.oclIsUndefined()
	operations
	beGrasped(a : RArm) 
	begin
		insert (a, self) into Grabbing;
	end
	pre notAlreadyGrasped:
		not self.grabbed
	post correctlyGrasped:
		self.grabbed and self.arm = a
	post _post_inv_InDiffPos:
		Item.allInstances() -> forAll(i1,i2 : Item  |i1 <> i2 implies i1.posX <> i2.posX or i1.posY <> i2.posY or i1.posZ <> i2.posZ)
	
	beReleased(a : RArm) 
	begin
		delete (a, self) from Grabbing;
	end
	pre alreadyGrasped:
		self.arm = a
	post correctlyReleased:
		not self.grabbed
	post _post_inv_InDiffPos:
		Item.allInstances() -> forAll(i1,i2 : Item  |i1 <> i2 implies i1.posX <> i2.posX or i1.posY <> i2.posY or i1.posZ <> i2.posZ)
	
	_beGrasped_notAlreadyGrasped(a : RArm) : Boolean
		= not self.grabbed
	
	_beReleased_alreadyGrasped(a : RArm) : Boolean
		= self.arm = a
	
	_inv_InDiffPos() : Boolean
		= Item.allInstances() -> forAll(i1,i2 : Item  |i1 <> i2 implies i1.posX <> i2.posX or i1.posY <> i2.posY or i1.posZ <> i2.posZ)
	
	_check_beReleased(a : RArm) : Boolean
		= self._beReleased_alreadyGrasped(a) and
		self._inv_InDiffPos()
	
	_check_beGrasped(a : RArm) : Boolean
		= self._beGrasped_notAlreadyGrasped(a) and
		self._inv_InDiffPos()
	
	constraints
	inv InDiffPos:
		Item.allInstances() -> forAll(i1,i2 : Item  |i1 <> i2 implies i1.posX <> i2.posX or i1.posY <> i2.posY or i1.posZ <> i2.posZ)
end

class RArm
	attributes
	speed : Real
		init: 10
	posX : Integer
		init: 1
	posY : Integer
		init: 1
	posZ : Integer
		init: 1
	contracted : Boolean
		init: false
	withItem : Boolean
		derived: not self.grabbedItem.oclIsUndefined()
	operations
	itemAtPos(posX : Integer, posY : Integer, posZ : Integer) : Item
		= Item.allInstances -> any(it|it.posX = posX and it.posY = posY and it.posZ = posZ)
	
	itemHere() : Item
		= itemAtPos(self.posX,self.posY,self.posZ - 1)
	
	isInInterval(min : Integer, max : Integer, val : Integer) : Boolean
		= not (val < min or val > max)
	
	grasp() : Item
	begin
		declare itemHere : Item;
		
		itemHere := self.itemHere();
		if not itemHere.oclIsUndefined() then
		itemHere.beGrasped(self);
		result := itemHere;
		else
		result := null;
		end;
		
		self.contracted := true;
	end
	pre looseHand:
		not self.contracted
	post closedHand:
		self.contracted
	post grabItem:
		if not self@pre.itemHere().oclIsUndefined() then self.withItem and self.itemHere().grabbed  else not self.withItem endif
	post returnItem:
		if not self.itemHere().oclIsUndefined() then result = self.itemHere()  else result = null endif
	post _post_inv_minXEqualOrLessThanMaxX:
		self.configuration.minX <= self.configuration.maxX
	post _post_inv_minYEqualOrLessThanMaxY:
		self.configuration.minY <= self.configuration.maxY
	post _post_inv_minZEqualOrLessThanMaxZ:
		self.configuration.minZ <= self.configuration.maxZ
	post _post_inv_posXValid:
		self.posX >= self.configuration.minX and self.posX <= self.configuration.maxX
	post _post_inv_posYValid:
		self.posY >= self.configuration.minY and self.posY <= self.configuration.maxY
	post _post_inv_posZValid:
		self.posZ >= self.configuration.minZ and self.posZ <= self.configuration.maxZ
	post _post_inv_grabWithArmContracted:
		self.withItem implies self.contracted
	
	drop() : Item
	begin
		result := self.grabbedItem;
		
		if self.withItem then
		self.grabbedItem.beReleased(self);
		end;
		
		self.contracted := false;
	end
	pre closedHand:
		self.contracted
	post looseHand:
		not self.contracted
	post releaseItem:
		self.grabbedItem.oclIsUndefined()
	post _post_inv_minXEqualOrLessThanMaxX:
		self.configuration.minX <= self.configuration.maxX
	post _post_inv_minYEqualOrLessThanMaxY:
		self.configuration.minY <= self.configuration.maxY
	post _post_inv_minZEqualOrLessThanMaxZ:
		self.configuration.minZ <= self.configuration.maxZ
	post _post_inv_posXValid:
		self.posX >= self.configuration.minX and self.posX <= self.configuration.maxX
	post _post_inv_posYValid:
		self.posY >= self.configuration.minY and self.posY <= self.configuration.maxY
	post _post_inv_posZValid:
		self.posZ >= self.configuration.minZ and self.posZ <= self.configuration.maxZ
	post _post_inv_grabWithArmContracted:
		self.withItem implies self.contracted
	
	moveSideways(x : Integer) : Integer
	begin
		self.posX := self.posX + x;
		
		-- MUTATION
		if not self.withItem then
		self.grabbedItem.posX := self.posX;
		end;
		
		result := (self.speed * x).round().abs();
	end
	pre avoidColissionX:
		Item.allInstances -> forAll(it|it <> self.grabbedItem implies (it.posY = self.posY and (it.posZ = self.posZ or (if self.withItem then it.posZ = self.posZ  else false endif)) implies if x >= 0 then not isInInterval(self.posX,self.posX + x,it.posX)  else not isInInterval(self.posX + x,self.posX,it.posX) endif))
	pre movXInsideRange:
		self.posX + x >= self.configuration.minX and self.posX + x <= self.configuration.maxX
	post newPosXInsideRange:
		self.posX >= self.configuration.minX and self.posX <= self.configuration.maxX
	post movXDone:
		self.posX = self.posX@pre + x
	post spentTimeValid:
		result >= 0
	post ItemMoved:
		self.withItem implies self.grabbedItem = self.itemHere()
	post _post_inv_minXEqualOrLessThanMaxX:
		self.configuration.minX <= self.configuration.maxX
	post _post_inv_minYEqualOrLessThanMaxY:
		self.configuration.minY <= self.configuration.maxY
	post _post_inv_minZEqualOrLessThanMaxZ:
		self.configuration.minZ <= self.configuration.maxZ
	post _post_inv_posXValid:
		self.posX >= self.configuration.minX and self.posX <= self.configuration.maxX
	post _post_inv_posYValid:
		self.posY >= self.configuration.minY and self.posY <= self.configuration.maxY
	post _post_inv_posZValid:
		self.posZ >= self.configuration.minZ and self.posZ <= self.configuration.maxZ
	post _post_inv_grabWithArmContracted:
		self.withItem implies self.contracted
	
	moveForward(y : Integer) : Integer
	begin
		self.posY := self.posY + y;
		
		if self.withItem then
		self.grabbedItem.posY := self.posY;
		end;
		
		result := (self.speed * y).round().abs();
	end
	pre avoidColissionY:
		Item.allInstances -> forAll(it|it <> self.grabbedItem implies (it.posX = self.posX and (it.posZ = self.posZ or (if self.withItem then it.posZ = self.posZ  else false endif)) implies if y >= 0 then not isInInterval(self.posY,self.posY + y,it.posY)  else not isInInterval(self.posY + y,self.posY,it.posY) endif))
	pre movYInsideRange:
		self.posY + y >= self.configuration.minY and self.posY + y <= self.configuration.maxY
	post newPosYInsideRange:
		self.posY >= self.configuration.minY and self.posY <= self.configuration.maxY
	post movYDone:
		self.posY = self.posY@pre + y
	post spentTimeValid:
		result >= 0
	post ItemMoved:
		self.withItem implies self.grabbedItem = self.itemHere()
	post _post_inv_minXEqualOrLessThanMaxX:
		self.configuration.minX <= self.configuration.maxX
	post _post_inv_minYEqualOrLessThanMaxY:
		self.configuration.minY <= self.configuration.maxY
	post _post_inv_minZEqualOrLessThanMaxZ:
		self.configuration.minZ <= self.configuration.maxZ
	post _post_inv_posXValid:
		self.posX >= self.configuration.minX and self.posX <= self.configuration.maxX
	post _post_inv_posYValid:
		self.posY >= self.configuration.minY and self.posY <= self.configuration.maxY
	post _post_inv_posZValid:
		self.posZ >= self.configuration.minZ and self.posZ <= self.configuration.maxZ
	post _post_inv_grabWithArmContracted:
		self.withItem implies self.contracted
	
	moveUp(z : Integer) : Integer
	begin
		self.posZ := self.posZ + z;
		
		if self.withItem then
		self.grabbedItem.posZ := self.posZ-1;
		end;
		
		result := (self.speed * z).round().abs();
	end
	pre avoidColissionZ:
		Item.allInstances -> forAll(it|it <> self.grabbedItem implies (it.posX = self.posX and it.posY = self.posY implies if z >= 0 then not isInInterval(self.posZ,self.posZ + z,it.posZ)  else if self.withItem then not isInInterval(self.posZ + z,self.posZ,it.posZ)  else not isInInterval(self.posZ + z,self.posZ,it.posZ) endif endif))
	pre movZInsideRange:
		self.posZ + z >= self.configuration.minZ and self.posZ + z <= self.configuration.maxZ
	post newPosZInsideRange:
		self.posZ >= self.configuration.minZ and self.posZ <= self.configuration.maxZ
	post movZDone:
		self.posZ = self.posZ@pre + z
	post spentTimeValid:
		result >= 0
	post ItemMoved:
		self.withItem implies self.grabbedItem = self.itemHere()
	post _post_inv_minXEqualOrLessThanMaxX:
		self.configuration.minX <= self.configuration.maxX
	post _post_inv_minYEqualOrLessThanMaxY:
		self.configuration.minY <= self.configuration.maxY
	post _post_inv_minZEqualOrLessThanMaxZ:
		self.configuration.minZ <= self.configuration.maxZ
	post _post_inv_posXValid:
		self.posX >= self.configuration.minX and self.posX <= self.configuration.maxX
	post _post_inv_posYValid:
		self.posY >= self.configuration.minY and self.posY <= self.configuration.maxY
	post _post_inv_posZValid:
		self.posZ >= self.configuration.minZ and self.posZ <= self.configuration.maxZ
	post _post_inv_grabWithArmContracted:
		self.withItem implies self.contracted
	
	_moveForward_movYInsideRange(y : Integer) : Boolean
		= self.posY + y >= self.configuration.minY and self.posY + y <= self.configuration.maxY
	
	_moveSideways_movXInsideRange(x : Integer) : Boolean
		= self.posX + x >= self.configuration.minX and self.posX + x <= self.configuration.maxX
	
	_moveUp_avoidColissionZ(z : Integer) : Boolean
		= Item.allInstances -> forAll(it|it <> self.grabbedItem implies (it.posX = self.posX and it.posY = self.posY implies if z >= 0 then not isInInterval(self.posZ,self.posZ + z,it.posZ)  else if self.withItem then not isInInterval(self.posZ + z,self.posZ,it.posZ)  else not isInInterval(self.posZ + z,self.posZ,it.posZ) endif endif))
	
	_grasp_looseHand() : Boolean
		= not self.contracted
	
	_drop_closedHand() : Boolean
		= self.contracted
	
	_moveForward_avoidColissionY(y : Integer) : Boolean
		= Item.allInstances -> forAll(it|it <> self.grabbedItem implies (it.posX = self.posX and (it.posZ = self.posZ or (if self.withItem then it.posZ = self.posZ  else false endif)) implies if y >= 0 then not isInInterval(self.posY,self.posY + y,it.posY)  else not isInInterval(self.posY + y,self.posY,it.posY) endif))
	
	_moveSideways_avoidColissionX(x : Integer) : Boolean
		= Item.allInstances -> forAll(it|it <> self.grabbedItem implies (it.posY = self.posY and (it.posZ = self.posZ or (if self.withItem then it.posZ = self.posZ  else false endif)) implies if x >= 0 then not isInInterval(self.posX,self.posX + x,it.posX)  else not isInInterval(self.posX + x,self.posX,it.posX) endif))
	
	_moveUp_movZInsideRange(z : Integer) : Boolean
		= self.posZ + z >= self.configuration.minZ and self.posZ + z <= self.configuration.maxZ
	
	_inv_minXEqualOrLessThanMaxX() : Boolean
		= self.configuration.minX <= self.configuration.maxX
	
	_inv_minYEqualOrLessThanMaxY() : Boolean
		= self.configuration.minY <= self.configuration.maxY
	
	_inv_minZEqualOrLessThanMaxZ() : Boolean
		= self.configuration.minZ <= self.configuration.maxZ
	
	_inv_posXValid() : Boolean
		= self.posX >= self.configuration.minX and self.posX <= self.configuration.maxX
	
	_inv_posYValid() : Boolean
		= self.posY >= self.configuration.minY and self.posY <= self.configuration.maxY
	
	_inv_posZValid() : Boolean
		= self.posZ >= self.configuration.minZ and self.posZ <= self.configuration.maxZ
	
	_inv_grabWithArmContracted() : Boolean
		= self.withItem implies self.contracted
	
	_check_moveSideways(x : Integer) : Boolean
		= self._moveSideways_movXInsideRange(x) and
		self._moveSideways_avoidColissionX(x) and
		self._inv_minXEqualOrLessThanMaxX() and
		self._inv_minYEqualOrLessThanMaxY() and
		self._inv_minZEqualOrLessThanMaxZ() and
		self._inv_posXValid() and
		self._inv_posYValid() and
		self._inv_posZValid() and
		self._inv_grabWithArmContracted()
	
	_check_moveForward(y : Integer) : Boolean
		= self._moveForward_movYInsideRange(y) and
		self._moveForward_avoidColissionY(y) and
		self._inv_minXEqualOrLessThanMaxX() and
		self._inv_minYEqualOrLessThanMaxY() and
		self._inv_minZEqualOrLessThanMaxZ() and
		self._inv_posXValid() and
		self._inv_posYValid() and
		self._inv_posZValid() and
		self._inv_grabWithArmContracted()
	
	_check_grasp() : Boolean
		= self._grasp_looseHand() and
		self._inv_minXEqualOrLessThanMaxX() and
		self._inv_minYEqualOrLessThanMaxY() and
		self._inv_minZEqualOrLessThanMaxZ() and
		self._inv_posXValid() and
		self._inv_posYValid() and
		self._inv_posZValid() and
		self._inv_grabWithArmContracted()
	
	_check_moveUp(z : Integer) : Boolean
		= self._moveUp_avoidColissionZ(z) and
		self._moveUp_movZInsideRange(z) and
		self._inv_minXEqualOrLessThanMaxX() and
		self._inv_minYEqualOrLessThanMaxY() and
		self._inv_minZEqualOrLessThanMaxZ() and
		self._inv_posXValid() and
		self._inv_posYValid() and
		self._inv_posZValid() and
		self._inv_grabWithArmContracted()
	
	_check_drop() : Boolean
		= self._drop_closedHand() and
		self._inv_minXEqualOrLessThanMaxX() and
		self._inv_minYEqualOrLessThanMaxY() and
		self._inv_minZEqualOrLessThanMaxZ() and
		self._inv_posXValid() and
		self._inv_posYValid() and
		self._inv_posZValid() and
		self._inv_grabWithArmContracted()
	
	constraints
	inv minXEqualOrLessThanMaxX:
		self.configuration.minX <= self.configuration.maxX
	inv minYEqualOrLessThanMaxY:
		self.configuration.minY <= self.configuration.maxY
	inv minZEqualOrLessThanMaxZ:
		self.configuration.minZ <= self.configuration.maxZ
	inv posXValid:
		self.posX >= self.configuration.minX and self.posX <= self.configuration.maxX
	inv posYValid:
		self.posY >= self.configuration.minY and self.posY <= self.configuration.maxY
	inv posZValid:
		self.posZ >= self.configuration.minZ and self.posZ <= self.configuration.maxZ
	inv grabWithArmContracted:
		self.withItem implies self.contracted
end

class _test
	operations
	test(n : Integer) 
	begin
		
			declare opIndex : Integer,
				target: RArm;
		
			for i in Sequence{1..n} do
				for target in RArm.allInstances() do
					opIndex := 5.rand().floor()+1;
					
					if opIndex = 1
						and target._check_grasp()
					then
						target.grasp();
					end;
					
					if opIndex = 2
						and target._check_drop()
					then
						target.drop();
					end;
					
					if opIndex = 3
					then
						begin
							declare x : Integer;	
									x := -10 + 20.rand().round();
									
							if target._check_moveSideways(x)
							then
								target.moveSideways(x);
							end;
						end;
					end;
					
					if opIndex = 4
					then
						begin
							declare y : Integer;	
									y := -10 + 20.rand().round();
									
							if target._check_moveForward(y)
							then
								target.moveForward(y);
							end;
						end;
					end;
					
					if opIndex = 5
					then
						begin
							declare z : Integer;	
									z := -10 + 20.rand().round();
									
							if target._check_moveUp(z)
							then
								target.moveUp(z);
							end;
						end;
					end;
					
				end;
			end;
	end
	
end

association Configure between
	Configuration [1]  role configuration 
	RArm [1]  role arm 
end

association Grabbing between
	RArm [0..1]  role arm 
	Item [0..1]  role grabbedItem 
end


